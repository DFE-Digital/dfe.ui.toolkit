var COOKIE_NAMES={PREFERENCES_SET:"cookies_preferences_set",POLICY:"cookies_policy",GA:"_ga",GA_GID:"_gid",GA_GAT:"_gat",USER_BANNER_LAST_SEEN:"user_banner_last_seen"},GOVUK_COOKIE_OPTIONS={expires:365,secure:!0,domain:".education.gov.uk"},GovUKCookie={getRaw:function(e){if(window.Cookies)return window.Cookies.get(e)},get:function(e){if(window.Cookies){var t=window.Cookies.get(e);return t?JSON.parse(t):t}},set:function(e,t){if(window.Cookies)return window.Cookies.set(e,t,GOVUK_COOKIE_OPTIONS)},remove:function(e){if(window.Cookies)return window.Cookies.remove(e,GOVUK_COOKIE_OPTIONS)}};function checkConditionForUsersBanner(){var e=GovUKCookie.getRaw(COOKIE_NAMES.USER_BANNER_LAST_SEEN);return!e||((new Date).getTime()-e)/864e5>90}function showReviewUsersBanner(){$("#review-users-banner").show()}function setReviewUsersBannerLastSeen(){GovUKCookie.set(COOKIE_NAMES.USER_BANNER_LAST_SEEN,(new Date).getTime())}function loadReviewUsersBanner(){checkConditionForUsersBanner()&&showReviewUsersBanner()}function updateCookieReviewUsersBanner(){checkConditionForUsersBanner()&&setReviewUsersBannerLastSeen()}GovUKCookie.remove(COOKIE_NAMES.POLICY),GovUKCookie.remove(COOKIE_NAMES.PREFERENCES_SET),GovUKCookie.remove(COOKIE_NAMES.GA),GovUKCookie.remove(COOKIE_NAMES.GA_GAT),GovUKCookie.remove(COOKIE_NAMES.GA_GID),function(e){"use strict";var t=e.GOVUK||{};t.details={NATIVE_DETAILS:"boolean"==typeof document.createElement("details").open,KEY_ENTER:13,KEY_SPACE:32,started:!1,addEvent:function(e,t,n){e.addEventListener?e.addEventListener(t,(function(e){n(e,e.target)}),!1):e.attachEvent&&e.attachEvent("on"+t,(function(e){n(e,e.srcElement)}))},removeEvent:function(e,t){e.removeEventListener?e.removeEventListener(t,(function(e){}),!1):e.detachEvent&&e.detachEvent("on"+t,(function(e){}))},charCode:function(e){return"number"==typeof e.which?e.which:e.keyCode},preventDefault:function(e){e.preventDefault?e.preventDefault():e.returnValue=!1},addClickEvent:function(e,n){t.details.addEvent(e,"keypress",(function(e,o){t.details.charCode(e)!==t.details.KEY_ENTER&&t.details.charCode(e)!==t.details.KEY_SPACE||"summary"===o.nodeName.toLowerCase()&&(t.details.preventDefault(e),o.click?o.click():n(e,o))})),t.details.addEvent(e,"keyup",(function(e,n){t.details.charCode(e)===t.details.KEY_SPACE&&"SUMMARY"===n.nodeName&&t.details.preventDefault(e)})),t.details.addEvent(e,"click",(function(e,t){n(e,t)}))},getAncestor:function(e,t){do{if(!e||e.nodeName.toLowerCase()===t)break;e=e.parentNode}while(e);return e},addDetailsPolyfill:function(e,n){if(n=n||document.body,!t.details.started&&(t.details.started=!0,0!==(e=n.getElementsByTagName("details")).length)){for(var o=e.length,i=0;i<o;i++){var a=e[i];if(a.__summary=a.getElementsByTagName("summary").item(0),a.__content=a.getElementsByTagName("div").item(0),!a.__summary||!a.__content)return;a.__content.id||(a.__content.id="details-content-"+i),a.setAttribute("role","group"),a.__summary.setAttribute("role","button"),a.__summary.setAttribute("aria-controls",a.__content.id),t.details.NATIVE_DETAILS||(a.__summary.tabIndex=0);var r=null!==a.getAttribute("open");if(!0===r?(a.__summary.setAttribute("aria-expanded","true"),a.__content.setAttribute("aria-hidden","false")):(a.__summary.setAttribute("aria-expanded","false"),a.__content.setAttribute("aria-hidden","true"),t.details.NATIVE_DETAILS||(a.__content.style.display="none")),a.__summary.__details=a,!t.details.NATIVE_DETAILS){var s=document.createElement("i");!0===r?(s.className="arrow arrow-open",s.appendChild(document.createTextNode("▼"))):(s.className="arrow arrow-closed",s.appendChild(document.createTextNode("►"))),a.__summary.__twisty=a.__summary.insertBefore(s,a.__summary.firstChild),a.__summary.__twisty.setAttribute("aria-hidden","true")}}t.details.addClickEvent(n,(function(e,n){return!(n=t.details.getAncestor(n,"summary"))||t.details.statechange(n)}))}},statechange:function(e){var n="true"===e.__details.__summary.getAttribute("aria-expanded"),o="true"===e.__details.__content.getAttribute("aria-hidden");(e.__details.__summary.setAttribute("aria-expanded",n?"false":"true"),e.__details.__content.setAttribute("aria-hidden",o?"false":"true"),t.details.NATIVE_DETAILS)||(e.__details.__content.style.display=n?"none":"",null!==e.__details.getAttribute("open")?e.__details.removeAttribute("open"):e.__details.setAttribute("open","open"));return e.__twisty&&(e.__twisty.firstChild.nodeValue=n?"►":"▼",e.__twisty.setAttribute("class",n?"arrow arrow-closed":"arrow arrow-open")),!0},destroy:function(e){t.details.removeEvent(e,"click")},init:function(e){t.details.addEvent(document,"DOMContentLoaded",t.details.addDetailsPolyfill),t.details.addEvent(window,"load",t.details.addDetailsPolyfill)}},e.GOVUK=t}(window);var NSA=NSA||{};const filterBoxes=$(".filter-box");function toKebabCase(e){return e.toLowerCase().replace(/\s+/g,"-")}function hideElement(){$(this).hide()}function uncheckCheckbox(){$(this).prop("checked",!1)}function extractStartingNumberFromId(e){const t=$(`#${e}`);return parseInt(t.prop("id").split("-").pop(),10)}function extractFirstPartFromId(e){const t=e.split("-");return t.length>=2?(t.pop(),`${t.join("-")}-`):e}function updateCount(e){const t=toKebabCase(e),n=$(`.${t} .govuk-checkboxes__input:checked`).length;$(`#${t}-count`).text(n)}function updateCategoryHeader(e){const t=toKebabCase(e),n=$(`#${t}-text`),o=$(`input[id^='show-hide-${t}']:checked`).length>0;n.css("display",o?"block":"none")}function updateNoFilterMessage(){const e=$(".govuk-checkboxes__input.dfe-filter-input:checked").length>0;$("#show-hide-selected-filters").css("display",e?"none":"block")}function showMe(e,t,n){const o=$(`#${n}`).prop("checked");$(`#${e}`).css("display",o?"block":"none"),updateCategoryHeader(t),updateNoFilterMessage()}function filterAndPerformAction(e,t,n){$(`[id^="${e}"]`).filter((function(){const e=parseInt(this.id.split("-").pop(),10);return!Number.isNaN(e)&&e>t})).each(n)}function hideMe(e,t,n){if("Last login"===t){const t=extractStartingNumberFromId(e),o=extractFirstPartFromId(e),i=extractFirstPartFromId(n);filterAndPerformAction(o,t,hideElement),filterAndPerformAction(i,t,uncheckCheckbox);$(".last-login-checkboxes-input").prop("disabled",!1)}$(`#${e}`).hide(),$(`#${n}`).prop("checked",!1),updateCount(t),updateCategoryHeader(t),updateNoFilterMessage()}function initializeFilters(){$(".govuk-checkboxes__input.dfe-filter-input").each((function(){if($(this).prop("checked")){const e=$(this).attr("id"),t=e.match(/show-hide-(.+)-(\d+)/);if(t&&3===t.length){const n=t[1],o=t[2],i=`${n}-option-${o}`;if("last-login"===n&&"6"===o){$(".last-login-checkboxes-input").slice(0,o-1).prop("disabled",!0)}showMe(i,n,e),updateCount(n),updateCategoryHeader(n),updateNoFilterMessage()}}}))}function handleLastLoginCheckboxChange(e,t){e.on("change",(function(){const n=e.index(this);let o;if(this.checked)if("never"===this.value)t.css("display","none"),e.slice(0,n).prop("checked",!1),e.slice(0,n).prop("disabled",!0),initializeFilters();else e.slice(0,n).prop("checked",!0),initializeFilters();else o=extractFirstPartFromId(this.id),filterAndPerformAction(o,n+1,uncheckCheckbox),e.slice(0,n).prop("disabled",!1),filterAndPerformAction("last-login-option-",n+1,hideElement),updateCount("last-login"),updateCategoryHeader("last-login")}))}NSA.filters={init(){function e(e){return e.filter(":checked").length>0?`${e.filter(":checked").length} selected`:""}filterBoxes.each(((t,n)=>{const o=$(n),i=o.find(".container-head"),a=i.find(".option-select-label"),r=o.find("input:checkbox"),s=$("<button />").addClass("js-container-head"),l=$("<div />").addClass("js-selected-counter").text((()=>e(r)));s.on("click",(e=>{const t=$(e.currentTarget),n=t.next();t.hasClass("closed")?(n.show(),t.removeClass("closed").attr("aria-expanded",!0)):(n.hide(),t.addClass("closed").attr("aria-expanded",!1)),e.preventDefault()})).append(a,l),i.replaceWith(s),r.on("change",(()=>{l.text((()=>e(r)))}))}))}},filterBoxes.length>0&&NSA.filters.init(),$((()=>{initializeFilters();const e=$(".last-login-checkboxes-input"),t=$(".last-login-option");e.on("click",(()=>{handleLastLoginCheckboxChange(e,t)}))})),(NSA=NSA||{}).modal={elems:{links:$(".modal-link"),modals:$(".modal")},init:function(){this.modalBg(),this.setUpEvents()},modalBg:function(){var e=this,t=$("<div>").addClass("modal-bg").hide().on("click",(function(){e.hideModals()}));$("body").append(t)},setUpEvents:function(){var e=this;this.elems.links.on("click",(function(t){var n=$(this).attr("href");e.showModal($(n)),t.preventDefault()})),e.elems.modals.find(".close").on("click",(function(t){e.hideModals(),t.preventDefault()})),$("body").on("keydown",(function(t){27===(t.keyCode||t.which)&&e.hideModals()}))},showModal:function(e){$("html").addClass("modal-open"),$(".modal-bg").show(),e.show()},hideModals:function(){$("html").removeClass("modal-open"),$(".modal-bg").hide(),this.elems.modals.hide()}},NSA.modal.init();const RESPONSE_TYPE_CODE="code",RESPONSE_TYPE_ID_TOKEN="ID token",RESPONSE_TYPE_TOKEN="token",FLOW_TYPE_IMPLICIT="implicit",FLOW_TYPE_AUTHORIZATION="authorization",FLOW_TYPE_HYBRID="hybrid";function getParameterByName(e,t){t||(t=window.location.href),e=e.replace(/[\[\]]/g,"\\$&");var n=new RegExp("[?&]"+e+"(=([^&#]*)|&|#|$)").exec(t);return n?n[2]?decodeURIComponent(n[2].replace(/\+/g," ")):"":null}function sortTable(e){var t,n,o,i,a,r,s,l,d=0;for(t=$("table.sortable"),o=!0,l="a";o;){for(o=!1,n=t.find("tr"),i=1;i<n.length-1;i++)if(s=!1,a=n[i].getElementsByTagName("TD")[e],r=n[i+1].getElementsByTagName("TD")[e],"a"===l){if(a.innerHTML.toLowerCase()>r.innerHTML.toLowerCase()){s=!0;break}}else if("d"===l&&a.innerHTML.toLowerCase()<r.innerHTML.toLowerCase()){s=!0;break}s?(n[i].parentNode.insertBefore(n[i+1],n[i]),o=!0,d++):0===d&&"a"===l&&(l="d",o=!0)}return l}$((()=>{const e=(e,t,n)=>{const o=$(`#${e}-add`),i=$(`${t}`);o.on("click",(function(){let t=parseInt(i.data(`${e}-counter`),10);const o=`${e}-${t}`;return $(`\n      <div class="govuk-body dfe-flex-container" id="${e}-input-group-${t}">\n        <label for="${o}" class="govuk-label govuk-label--s govuk-visually-hidden">\n          ${n}\n        </label>\n        <input\n          class="form-control dfe-flex-input-grow govuk-input"\n          id="${o}"\n          name="${e}"\n        />\n        <a href="#" class="govuk-link govuk-link--no-visited-state remove-redirect" id="${e}-remove-${t}" data-group-id="${t}">Remove</a>\n      </div>`).appendTo(i),t+=1,i.data(`${e}-counter`,t),$(this).trigger("blur"),!1})),i.on("click",".remove-redirect",(function(t){t.preventDefault();const n=$(this).data("group-id");$(`#${e}-input-group-${n}`).remove(),$(this).trigger("blur");const o=i.find(".dfe-flex-container").length;i.data(`${e}-counter`,o)}))};function t(e,t,n){$(e).on("click",(function(){const e=window.niceware.generatePassphrase(8).join("-");return window.confirm(n)&&$(`input#${t}`).attr("value",e),$(this).trigger("blur"),!1}))}function n(){const e=[];$("#response_types-id_token").is(":checked")&&e.push("ID token"),$("#response_types-token").is(":checked")&&e.push("token"),$("#response_types-code").is(":checked")&&e.push("code");let t="";if(e.length>0){e.sort(((e,t)=>{const n=["code","ID token","token"];return n.indexOf(e)-n.indexOf(t)}));let n="implicit";if(1===e.length&&e.includes("code")?n="authorization":(e.includes("code")&&e.includes("token")||e.includes("code")&&e.includes("ID token"))&&(n="hybrid"),1===e.length&&e.includes("token"))t="";else{let o;if(e.length>1){o=`${e.slice(0,-1).join(", ")} and ${e[e.length-1]}`}else[o]=e;t=`\n            <div class="govuk-warning-text govuk-!-margin-top-5 govuk-!-margin-bottom-0" id="warning-response-types">\n                <span class="govuk-warning-text__icon" aria-hidden="true">!</span>\n                <strong class="govuk-warning-text__text">\n                    <span class="govuk-warning-text__assistive">Warning</span>\n                    You have selected ${o} as your response type. This means ${n} flow is your flow.\n                </strong>\n            </div>\n        `}}$("#warning-response-types").remove(),t&&$("#response_types-fieldset").append(t);if($("#response_types-code").length){const e=$("#response_types-code").offset().top,t=$(window).scrollTop();$("#response_types-code").is(":checked")?($("#refresh_token-wrapper :input, #clientSecret-wrapper :input, #tokenEndpointAuthMethod-wrapper select").prop("disabled",!1),$("#refresh_token-wrapper, #clientSecret-wrapper, #tokenEndpointAuthMethod-wrapper").slideDown(500)):$("#refresh_token-wrapper, #clientSecret-wrapper, #tokenEndpointAuthMethod-wrapper").slideUp(500,(()=>{$("#refresh_token-wrapper :input, #clientSecret-wrapper :input, #tokenEndpointAuthMethod-wrapper select").prop("disabled",!0)}));const n=$("#response_types-code").offset().top-e;$("html, body").animate({scrollTop:t+n},50,"linear")}}e("redirect_uris","#redirect_uris-form-group","Redirect URL"),e("post_logout_redirect_uris","#post_logout_redirect_uris-form-group","Logout redirect URL"),t("#generate-clientSecret","clientSecret","Are you sure you want to regenerate the client secret?"),t("#generate-apiSecret","apiSecret","Are you sure you want to regenerate the API secret?"),n(),$("#response_types-id_token, #response_types-token, #response_types-code").on("change",(()=>{n()}))})),function(e){"use strict";var t=e.jQuery,n=e.GOVUK||{};function o(){var e=this,n="ShowHideContent",o='[data-target] > input[type="radio"]',i='[data-target] > input[type="checkbox"]',a="a.js-toggle-content";function r(){var e=t(this),n=s(e);n.length&&(e.attr("aria-controls",n.attr("id")),e.attr("aria-expanded","false"),n.attr("aria-hidden","true"))}function s(e){var n=e.attr("aria-controls");return n||(n=e.closest("[data-target]").data("target")),t("#"+n)}function l(e,t){t.hasClass("js-hidden")&&(t.removeClass("js-hidden"),t.attr("aria-hidden","false"),e.attr("aria-controls")&&e.attr("aria-expanded","true"))}function d(e,t){(t=t||s(e)).hasClass("js-hidden")||(t.addClass("js-hidden"),t.attr("aria-hidden","true"),e.attr("aria-controls")&&e.attr("aria-expanded","false"))}function c(e,n){var i=o+"[name="+(e.attr("name").replace("[","\\[").replace("]","\\]")+"][aria-controls]"),a=e.closest("form");(a.length?a.find(i):t(i)).each((function(){d(t(this))})),e.is("[aria-controls]")&&l(e,n)}function u(e,t){e.is(":checked")?l(e,t):d(e,t)}function p(e,t,n){t.hasClass("js-hidden")?l(e,t):d(e,t),n.preventDefault()}function h(e,o,i,a){function l(e){var n=t(this);a(n,s(n),e)}e=e||t(document.body);var d=t(o);d.each(r),t.each(i,(function(t,o){e.on("click."+n,o,l)})),d.is(":checked")&&d.filter(":checked").each(l)}e.showHideRadioToggledContent=function(e){var n;h(e,o,(n=[],t(o).map((function(){var e=t(this).attr("name");return-1===t.inArray(e,n)?(n.push(e),'input[type="radio"][name="'+t(this).attr("name")+'"]'):null}))),c)},e.showHideCheckboxToggledContent=function(e){h(e,i,[i],u)},e.showHideLinkToggledContent=function(e){h(e,a,[a],p)},e.destroy=function(e){(e=e||t(document.body)).off("."+n)}}o.prototype.init=function(e){this.showHideRadioToggledContent(e),this.showHideCheckboxToggledContent(e),this.showHideLinkToggledContent(e)},n.ShowHideContent=o,e.GOVUK=n}(window),(NSA=NSA||{}).signin={form:$(".form-signin"),init:function(){this.setupEvents()},setupEvents:function(){this.form.on("submit",this,this.handleSubmit)},handleSubmit:function(e){var t=$(this),n=t.find("input").not(":checkbox"),o={},i=$(this).find("button:submit"),a=i.eq(0);i.attr("disabled","disabled"),a.css("min-width",a.outerWidth()+"px"),a.find(".loader").removeClass("vh"),n.each((function(){o[this.name]=$(this).val()})),$(".password-input").each((function(e){$(this).attr("type","password"),$(this).siblings(".show-password").html("Show")})),$.ajax({type:"POST",data:o,url:t.attr("action"),context:e.data,dataType:"json",success:function(e){e.redirect?(window.location.href=e.uri,$("title").html("DfE Sign-in")):e.isFailedLogin?(this.resetValidation(t),$("title").html("Error: DfE Sign-in"),e.delayTill?this.showValidationMessage(e.validationMessages,!0):(this.showValidationMessage(e.validationMessages),i.removeAttr("disabled")),this.showInlineValidation(e.validationMessages),a.find(".loader").addClass("vh")):this.buildFormAndSubmit(e)},error:function(){this.resetValidation(t),this.showValidationMessage(),i.removeAttr("disabled"),a.find(".loader").addClass("vh")}}),e.preventDefault()},resetValidation:function(e){$(".govuk-error-summary").remove(),e.find(".govuk-form-group").each((function(){var e=$(this).find("input").eq(0);$(this).hasClass("govuk-form-group--error")&&($(this).removeClass("govuk-form-group--error"),$(this).find("span.govuk-error-message").remove(),e.removeAttr("aria-describedby").removeAttr("aria-invalid"))}))},showValidationMessage:function(e,t){var n=$("<div />").attr("class","govuk-error-summary govuk-!-margin-top-6").attr("role","alert").attr("tabindex","-1").attr("aria-labelledby","error-summary-title"),o=$("<h2 />").attr("class","govuk-error-summary__title").attr("id","error-summary"),i=$("<div />").attr("class","govuk-error-summary__body"),a=$("<ul />").attr("class","govuk-list govuk-error-summary__list");if(e){if(o.text("There is a problem"),$.each(e,(function(e,t){"loginError"===e&&(e="username");var n=$("<a />").attr("class","govuk-link").attr("href","#"+e).text(t),o=$("<li />").append(n);a.append(o)})),t){var r=$("<a />").attr("class","govuk-link-bold").attr("href","").attr("onclick","window.location.reload()").text("Refresh this page").css("color","#1d70b8"),s=$("<li />").append(r);a.append(s)}}else{o.text("There has been an error");s=$("<li />").html('Please try again later. If the problem continues, follow the link to <a href="https://help.signin.education.gov.uk/contact/form">submit a support request</a>');a.append(s)}n.append(o).append(i.append(a)),$("main").prepend(n),$("html, body").animate({scrollTop:n.offset().top-15},300)},showInlineValidation:function(e){$.each(e,(function(e,t){var n=$("input[name="+e+"]"),o=n.parent(),i=o.find("label").first();if(!o.hasClass("govuk-form-group--error"))var a=$('<span class="govuk-body">').html('<span class="govuk-visually-hidden">Error:</span>'+t).prop("class","govuk-error-message").prop("id","validation-"+e);i.after(a),o.addClass("govuk-form-group--error"),n.attr({"aria-describedby":"validation-"+e,"aria-invalid":"true"})}))},buildFormAndSubmit:function(e){var t=$("<form />").attr({method:"post",action:e.destination,id:"dfesigninform"});$.each(e.postbackData,(function(e,n){var o=$("<input />").attr({type:"hidden",name:e,value:n});t.append(o)})),$("#dfesigninform").remove(),$("body").append(t),t.submit()}},$(".form-signin").length>0&&NSA.signin.init(),$((function(){$("table.sortable thead th").on("click",(function(){var e=$("table.sortable thead tr th");e.removeClass("sorted").removeClass("dir-a").removeClass("dir-d");var t=sortTable(e.index($(this)));$(this).addClass("sorted dir-"+t)}))}));var toggleTips=$(".toggle-help");function validatePassword(){var e=$(this).attr("id"),t=[{Pattern:/(.*[A-Z]){2}/,Target:`upper-case-${e}`},{Pattern:/(.*[a-z]){2}/,Target:`lower-case-${e}`},{Pattern:/(.*\d){2}/,Target:`numbers-${e}`}],n=$(this).val();$(`#length-${e}`).removeClass(n.length>7?"icon-remove":"icon-ok"),$(`#length-${e}`).addClass(n.length>7?"icon-ok":"icon-remove");for(var o=0;o<t.length;o++)$("#"+t[o].Target).removeClass(new RegExp(t[o].Pattern).test(n)?"icon-remove":"icon-ok"),$("#"+t[o].Target).addClass(new RegExp(t[o].Pattern).test(n)?"icon-ok":"icon-remove")}toggleTips.each((function(){var e,t,n,o;e=$(this),n=$("<span />").attr("class","toggletip"),o=$("<button />").attr("type","button").attr("aria-label","Help").attr("data-toggletip-content",e.html()).text("?").on("click",(function(){var t=$(this).data("toggletip-content"),n=$(this).next();window.setTimeout((function(){n.html((function(){return $("<span />").attr("class",(function(){return e.html().length>50?"bubble long":"bubble"})).text(t)}))}),100)})).on("keydown",(function(e){27===(e.keyCode||e.which)&&t.html("")})),t=$("<span />").attr("role","status"),n.append(o,t),e.before(n).remove(),$(document).on("click",(function(n){e[0]!==$(n.target)&&t.html("")}))})),$(".password-input-check").each((function(e,t){var n=$(this),o=n.attr("id"),i=$(`<div id='validation-feedback-${o}'>`).append(`<div id='length-${o}' class='icon-remove'>8 characters minimum</div>`).append(`<div id='upper-case-${o}' class='icon-remove'>contain at least 2 upper-case characters</div>`).append(`<div id='lower-case-${o}' class='icon-remove'>contain at least 2 lower-case characters</div>`).append(`<div id='numbers-${o}' class='icon-remove' style='margin-bottom: 6px;'>contain at least 2 numbers</div>`);n.before(i)})),$(".password-input-check").on("keyup",validatePassword);var forms=$("#content form");forms.attr("novalidate","novalidate");NSA=NSA||{};function select2ModelMatcher(e,t){if(t.parentText=t.parentText||"",void 0===e.term||!e.term||""===e.term.trim())return t;if(t.children&&t.children.length>0){for(var n=$.extend(!0,{},t),o=t.children.length-1;o>=0;o--){var i=t.children[o];i.parentText+=t.parentText+" "+t.text,null==select2ModelMatcher(e,i)&&n.children.splice(o,1)}return n.children.length>0?n:select2ModelMatcher(e,n)}var a=(t.parentText+" "+t.text).toUpperCase(),r=e.term.toUpperCase();return a.indexOf(r)>-1?t:null}NSA={initialiseShowPassword:function(){$(".password-input").each((function(e){var t=$(this),n=$("<button />").prop({type:"button",class:"show-password govuk-button govuk-button--secondary govuk-!-margin-bottom-1",ariaLabel:ariaLabel="Show password"});n.html("Show"),n.on("click",(function(){"password"===t.attr("type")?(t.attr("type","text"),n.text("Hide")):(t.attr("type","password"),n.text("Show"))})),t.after(n)}))},backLink:function(){var e=$("<a>").attr({href:"#",class:"govuk-back-link-bold"}).text("Back").on("click",(function(e){window.history.back(),e.preventDefault()}));$(".js-back-link").html(e)}},$("select.select2").length>0&&$("select.select2").select2({matcher:select2ModelMatcher}),$(".password-input").length>0&&NSA.initialiseShowPassword(),$(".js-back-link")&&NSA.backLink(),$(".under-construction").on("click",(function(e){alert("This functionality is not available yet"),e.preventDefault()})),$(".notification span.icon").length>0&&$(".notification span.icon").on("click",(function(){$(this).parent().hide()})),$("article.organisation-services").length>0&&($(".information").on("click",(function(e){var t=$(this).parent().parent().find(".service-description");e.preventDefault(),t.toggle()})),$(".info-link").on("click",(function(e){var t=$(this).parent().next();e.preventDefault(),t.toggle()})));var searchFields=$("form .search-field");if(searchFields.length>0){var loader=$("<span />").addClass("loader spinner-inline"),b1=$("<span />").addClass("ball b-1"),b2=$("<span />").addClass("ball b-2");loader.append(b1).append(b2),searchFields.each((function(){var e=$(this).parent(),t=e.find("button");e.on("submit",(function(){t.after(loader).hide()}))}))}var formRegister=$(".prevent-form-double-submission");formRegister.length>0&&formRegister.each((function(){var e=$(formRegister).find("button:submit"),t=e.eq(0);formRegister.on("submit",(function(){e.attr("disabled","disabled"),t.css("min-width",t.outerWidth()+"px"),t.append("<span class='loader spinner-inline'> <span class='ball b-1'></span> <span class='ball b-2'></span> <span class='ball b-3'></span> </span>")}))})),$(".auto-scroll-on-change").on("change",(function(e){$(window).scrollTop($(".auto-scroll-dest").position().top)})),$(".close-button").on("click",(function(e){e.target.closest(".govuk-notification-banner").remove()})),$(".toggle-open").on("click",(function(e){var t=$(this).next();e.preventDefault(),t.removeClass("govuk-visually-hidden"),$(this).addClass("govuk-visually-hidden")}));var timeoutTimer,tabId=(new Date).getTime();function sessionTimeout(){localStorage.removeItem("uri"),window.onfocus=function(){countTimeDiff()},setTimeout((function(){localStorage.setItem("tabs","1"),$(".session-timeout-overlay").show(),$("#modal-signin").focus(),startTimer()}),826e3)}function startTimer(){var e="4 minutes and 60 seconds";timeoutTimer=setInterval((function(){"0"===localStorage.getItem("tabs")&&(clearInterval(timeoutTimer),location.reload());var t=e.split("and"),n=parseInt(t[0],10),o=parseInt(t[1],10);n=--o<0?--n:n,o=(o=o<0?59:o)<10?"0"+o:o,$("#minutes").html(n),$("#seconds").html(o),n<0||o<=0&&n<=0?callTimeout():tabId&&countTimeDiff(),e=n+" minutes and "+o+" seconds"}),1e3)}function callTimeout(){clearInterval(timeoutTimer),localStorage.setItem("uri",location.pathname),location.href="/signout"}function countTimeDiff(){((new Date).getTime()-Number(tabId))/6e4>20&&(localStorage.setItem("uri",location.pathname),clearInterval(timeoutTimer),location.reload())}$("#modal-signin").on("click",(()=>{clearInterval(timeoutTimer),localStorage.setItem("tabs","0"),location.reload()})),$("#modal-signout").on("click",(()=>{clearInterval(timeoutTimer),location.href="/signout"}));var showHideContent=new GOVUK.ShowHideContent;showHideContent.init(),GOVUK.details.init();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9jb29raWVzLmpzIiwiX2RldGFpbHMucG9seWZpbGwuanMiLCJfZmlsdGVyLWJveGVzLmpzIiwiX2ZpbHRlcnMuanMiLCJfbW9kYWwuanMiLCJfc2VydmljZUNvbmZpZ0Zvcm0uanMiLCJfc2lnbmluLmpzIiwiX3RhYmxlc29ydC5qcyIsIl9zaG93LWhpZGUtY29udGVudC5qcyIsIl90b29sdGlwLmpzIiwiX3ZhbGlkYXRlLXBhc3N3b3JkLmpzIiwiX3ZhbGlkYXRpb24uanMiLCJhcHAuanMiXSwibmFtZXMiOlsiQ09PS0lFX05BTUVTIiwiUFJFRkVSRU5DRVNfU0VUIiwiUE9MSUNZIiwiR0EiLCJHQV9HSUQiLCJHQV9HQVQiLCJVU0VSX0JBTk5FUl9MQVNUX1NFRU4iLCJHT1ZVS19DT09LSUVfT1BUSU9OUyIsImV4cGlyZXMiLCJzZWN1cmUiLCJkb21haW4iLCJHb3ZVS0Nvb2tpZSIsImdldFJhdyIsIm5hbWUiLCJ3aW5kb3ciLCJDb29raWVzIiwiZ2V0IiwidmFsdWUiLCJKU09OIiwicGFyc2UiLCJzZXQiLCJyZW1vdmUiLCJjaGVja0NvbmRpdGlvbkZvclVzZXJzQmFubmVyIiwibGFzdFNlZW4iLCJEYXRlIiwiZ2V0VGltZSIsInNob3dSZXZpZXdVc2Vyc0Jhbm5lciIsIiQiLCJzaG93Iiwic2V0UmV2aWV3VXNlcnNCYW5uZXJMYXN0U2VlbiIsImxvYWRSZXZpZXdVc2Vyc0Jhbm5lciIsInVwZGF0ZUNvb2tpZVJldmlld1VzZXJzQmFubmVyIiwiZ2xvYmFsIiwiR09WVUsiLCJkZXRhaWxzIiwiTkFUSVZFX0RFVEFJTFMiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJvcGVuIiwiS0VZX0VOVEVSIiwiS0VZX1NQQUNFIiwic3RhcnRlZCIsImFkZEV2ZW50Iiwibm9kZSIsInR5cGUiLCJjYWxsYmFjayIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwidGFyZ2V0IiwiYXR0YWNoRXZlbnQiLCJzcmNFbGVtZW50IiwicmVtb3ZlRXZlbnQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZGV0YWNoRXZlbnQiLCJjaGFyQ29kZSIsIndoaWNoIiwia2V5Q29kZSIsInByZXZlbnREZWZhdWx0IiwicmV0dXJuVmFsdWUiLCJhZGRDbGlja0V2ZW50Iiwibm9kZU5hbWUiLCJ0b0xvd2VyQ2FzZSIsImNsaWNrIiwiZ2V0QW5jZXN0b3IiLCJtYXRjaCIsInBhcmVudE5vZGUiLCJhZGREZXRhaWxzUG9seWZpbGwiLCJsaXN0IiwiY29udGFpbmVyIiwiYm9keSIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwibGVuZ3RoIiwibiIsImkiLCJfX3N1bW1hcnkiLCJpdGVtIiwiX19jb250ZW50IiwiaWQiLCJzZXRBdHRyaWJ1dGUiLCJ0YWJJbmRleCIsIm9wZW5BdHRyIiwiZ2V0QXR0cmlidXRlIiwic3R5bGUiLCJkaXNwbGF5IiwiX19kZXRhaWxzIiwidHdpc3R5IiwiY2xhc3NOYW1lIiwiYXBwZW5kQ2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsIl9fdHdpc3R5IiwiaW5zZXJ0QmVmb3JlIiwiZmlyc3RDaGlsZCIsInN1bW1hcnkiLCJzdGF0ZWNoYW5nZSIsImV4cGFuZGVkIiwiaGlkZGVuIiwicmVtb3ZlQXR0cmlidXRlIiwibm9kZVZhbHVlIiwiZGVzdHJveSIsImluaXQiLCIkY29udGFpbmVyIiwiTlNBIiwiZmlsdGVyQm94ZXMiLCJ0b0tlYmFiQ2FzZSIsInN0ciIsInJlcGxhY2UiLCJoaWRlRWxlbWVudCIsInRoaXMiLCJoaWRlIiwidW5jaGVja0NoZWNrYm94IiwicHJvcCIsImV4dHJhY3RTdGFydGluZ051bWJlckZyb21JZCIsImVsZW1lbnRJZCIsImVsZW1lbnQiLCJwYXJzZUludCIsInNwbGl0IiwicG9wIiwiZXh0cmFjdEZpcnN0UGFydEZyb21JZCIsInBhcnRzIiwiam9pbiIsInVwZGF0ZUNvdW50IiwiY2F0ZWdvcnlOYW1lIiwic2FmZUNhdGVnb3J5TmFtZSIsImNoZWNrZWRDb3VudCIsInRleHQiLCJ1cGRhdGVDYXRlZ29yeUhlYWRlciIsImNhdGVnb3J5SGVhZGVyIiwiaXNBbnlDaGVja2VkSW5DYXRlZ29yeSIsImNzcyIsInVwZGF0ZU5vRmlsdGVyTWVzc2FnZSIsImlzQW55Q2hlY2tlZEdsb2JhbCIsInNob3dNZSIsImJveElkIiwiY2hlY2tlZEVsZW1lbnRJZCIsImlzQ2hlY2tlZCIsImZpbHRlckFuZFBlcmZvcm1BY3Rpb24iLCJmaXJzdFBhcnRPZkxpc3RJZCIsImxpc3RJZFN0YXJ0aW5nTnVtYmVyIiwicGVyZm9ybUFjdGlvbiIsImZpbHRlciIsIk51bWJlciIsImlzTmFOIiwiZWFjaCIsImhpZGVNZSIsImxpc3RJZCIsImNoZWNrYm94SWQiLCJmaXJzdFBhcnRPZkNoZWNrYm94SWQiLCJpbml0aWFsaXplRmlsdGVycyIsImF0dHIiLCJpbmRleCIsInNsaWNlIiwiaGFuZGxlTGFzdExvZ2luQ2hlY2tib3hDaGFuZ2UiLCJjaGVja2JveGVzIiwibGFzdExvZ2luTGlzdFRhZ3MiLCJvbiIsImNoZWNrZWQiLCJmaWx0ZXJzIiwiY2hlY2tDb3VudFRleHQiLCJfIiwiZmlsdGVyQm94IiwiaGVhZGVyIiwiZmluZCIsInRpdGxlIiwiYnV0dG9uIiwiYWRkQ2xhc3MiLCJjaGVja0NvdW50IiwiY3VycmVudFRhcmdldCIsIm9wdGlvbnMiLCJuZXh0IiwiaGFzQ2xhc3MiLCJyZW1vdmVDbGFzcyIsImFwcGVuZCIsInJlcGxhY2VXaXRoIiwibGFzdExvZ2luQ2hlY2tib3hlcyIsIm1vZGFsIiwiZWxlbXMiLCJsaW5rcyIsIm1vZGFscyIsIm1vZGFsQmciLCJzZXRVcEV2ZW50cyIsInRoYXQiLCJiZyIsImhpZGVNb2RhbHMiLCJzaG93TW9kYWwiLCJSRVNQT05TRV9UWVBFX0NPREUiLCJSRVNQT05TRV9UWVBFX0lEX1RPS0VOIiwiUkVTUE9OU0VfVFlQRV9UT0tFTiIsIkZMT1dfVFlQRV9JTVBMSUNJVCIsIkZMT1dfVFlQRV9BVVRIT1JJWkFUSU9OIiwiRkxPV19UWVBFX0hZQlJJRCIsImdldFBhcmFtZXRlckJ5TmFtZSIsInVybCIsImxvY2F0aW9uIiwiaHJlZiIsInJlc3VsdHMiLCJSZWdFeHAiLCJleGVjIiwiZGVjb2RlVVJJQ29tcG9uZW50Iiwic29ydFRhYmxlIiwidGFibGUiLCJyb3dzIiwic3dpdGNoaW5nIiwieCIsInkiLCJzaG91bGRTd2l0Y2giLCJkaXJlY3Rpb24iLCJzd2l0Y2hjb3VudCIsImlubmVySFRNTCIsImNyZWF0ZVNlcnZpY2VDb25maWdVcmxTZWN0aW9ucyIsInNlY3Rpb25JZCIsImZvcm1Hcm91cFNlbGVjdG9yIiwibGFiZWxUZXh0IiwiYWRkQnV0dG9uIiwiZm9ybUdyb3VwIiwiY291bnRlciIsImRhdGEiLCJuZXdJbnB1dElkIiwiYXBwZW5kVG8iLCJ0cmlnZ2VyIiwiZ3JvdXBJZCIsIm5ld0NvdW50ZXIiLCJoYW5kbGVTZWNyZXRHZW5lcmF0aW9uIiwiZXZlbnRJZCIsImlucHV0SWQiLCJjb25maXJtTWVzc2FnZSIsInNlY3JldCIsIm5pY2V3YXJlIiwiZ2VuZXJhdGVQYXNzcGhyYXNlIiwiY29uZmlybSIsInVwZGF0ZVNlY3Rpb25zIiwic2VsZWN0ZWRUeXBlcyIsImlzIiwicHVzaCIsIndhcm5pbmdNZXNzYWdlIiwic29ydCIsImEiLCJiIiwib3JkZXIiLCJpbmRleE9mIiwiZmxvd1R5cGUiLCJpbmNsdWRlcyIsInNlbGVjdGVkVHlwZXNEaXNwbGF5IiwiaW5pdGlhbE9mZnNldCIsIm9mZnNldCIsInRvcCIsImluaXRpYWxTY3JvbGxQb3NpdGlvbiIsInNjcm9sbFRvcCIsInNsaWRlRG93biIsInNsaWRlVXAiLCJvZmZzZXREaWZmZXJlbmNlIiwiYW5pbWF0ZSIsImpRdWVyeSIsIlNob3dIaWRlQ29udGVudCIsInNlbGYiLCJzZWxlY3RvcnMiLCJpbml0VG9nZ2xlZENvbnRlbnQiLCIkY29udHJvbCIsIiRjb250ZW50IiwiZ2V0VG9nZ2xlZENvbnRlbnQiLCJjbG9zZXN0Iiwic2hvd1RvZ2dsZWRDb250ZW50IiwiaGlkZVRvZ2dsZWRDb250ZW50IiwiaGFuZGxlUmFkaW9Db250ZW50Iiwic2VsZWN0b3IiLCIkZm9ybSIsImhhbmRsZUNoZWNrYm94Q29udGVudCIsImhhbmRsZUxpbmtDb250ZW50IiwiJGV2ZW50IiwiZWxlbWVudFNlbGVjdG9yIiwiZXZlbnRTZWxlY3RvcnMiLCJoYW5kbGVyIiwiZGVmZXJyZWQiLCJldmVudCIsIiRjb250cm9scyIsImlkeCIsImV2ZW50U2VsZWN0b3IiLCJzaG93SGlkZVJhZGlvVG9nZ2xlZENvbnRlbnQiLCJyYWRpb0dyb3VwcyIsIm1hcCIsImdyb3VwTmFtZSIsImluQXJyYXkiLCJzaG93SGlkZUNoZWNrYm94VG9nZ2xlZENvbnRlbnQiLCJzaG93SGlkZUxpbmtUb2dnbGVkQ29udGVudCIsIm9mZiIsInByb3RvdHlwZSIsInNpZ25pbiIsImZvcm0iLCJzZXR1cEV2ZW50cyIsImhhbmRsZVN1Ym1pdCIsIiRpbnB1dHMiLCJub3QiLCJwb3N0RGF0YSIsIiRzdWJtaXRCdXR0b25zIiwiJHN1Ym1pdEJ1dHRvbiIsImVxIiwib3V0ZXJXaWR0aCIsInZhbCIsInNpYmxpbmdzIiwiaHRtbCIsImFqYXgiLCJjb250ZXh0IiwiZGF0YVR5cGUiLCJzdWNjZXNzIiwicmVkaXJlY3QiLCJ1cmkiLCJpc0ZhaWxlZExvZ2luIiwicmVzZXRWYWxpZGF0aW9uIiwiZGVsYXlUaWxsIiwic2hvd1ZhbGlkYXRpb25NZXNzYWdlIiwidmFsaWRhdGlvbk1lc3NhZ2VzIiwicmVtb3ZlQXR0ciIsInNob3dJbmxpbmVWYWxpZGF0aW9uIiwiYnVpbGRGb3JtQW5kU3VibWl0IiwiZXJyb3IiLCIkZmllbGQiLCJtZXNzYWdlcyIsInNob3dSZWZyZXNoTGluayIsIiRkaXYiLCIkaDIiLCIkdWxDb250YWluZXIiLCIkdWwiLCIkYSIsIiRsaSIsInByZXBlbmQiLCIkcGFyZW50IiwicGFyZW50IiwiJGxhYmVsIiwiZmlyc3QiLCJlcnJvck1lc3NhZ2UiLCJhZnRlciIsIm1ldGhvZCIsImFjdGlvbiIsImRlc3RpbmF0aW9uIiwicG9zdGJhY2tEYXRhIiwic3VibWl0IiwiaGVhZGluZ0NlbGxzIiwidG9nZ2xlVGlwcyIsInZhbGlkYXRlUGFzc3dvcmQiLCJydWxlcyIsIlBhdHRlcm4iLCJUYXJnZXQiLCJwYXNzd29yZCIsInRlc3QiLCIkdGhhdCIsImxpdmVSZWdpb24iLCJ0b2dnbGVUaXAiLCJtZXNzYWdlIiwic2V0VGltZW91dCIsImJlZm9yZSIsIiRwYXNzd29yZElucHV0IiwidmFsaWRhdGVQYXNzd29yZEh0bWwiLCJmb3JtcyIsInNlbGVjdDJNb2RlbE1hdGNoZXIiLCJwYXJhbXMiLCJwYXJlbnRUZXh0IiwidGVybSIsInRyaW0iLCJjaGlsZHJlbiIsImV4dGVuZCIsImMiLCJjaGlsZCIsInNwbGljZSIsIm9yaWdpbmFsIiwidG9VcHBlckNhc2UiLCJpbml0aWFsaXNlU2hvd1Bhc3N3b3JkIiwiJHNob3dCdXR0b24iLCJjbGFzcyIsImFyaWFMYWJlbCIsImJhY2tMaW5rIiwiaGlzdG9yeSIsImJhY2siLCJzZWxlY3QyIiwibWF0Y2hlciIsImFsZXJ0IiwiaW5mbyIsInRvZ2dsZSIsIm1ldGEiLCJzZWFyY2hGaWVsZHMiLCJsb2FkZXIiLCJiMSIsImIyIiwiZm9ybVJlZ2lzdGVyIiwicG9zaXRpb24iLCJ0aW1lb3V0VGltZXIiLCJ0YWJJZCIsInNlc3Npb25UaW1lb3V0IiwibG9jYWxTdG9yYWdlIiwicmVtb3ZlSXRlbSIsIm9uZm9jdXMiLCJjb3VudFRpbWVEaWZmIiwic2V0SXRlbSIsImZvY3VzIiwic3RhcnRUaW1lciIsInRpbWVQbGFjZUhvbGRlciIsInNldEludGVydmFsIiwiZ2V0SXRlbSIsImNsZWFySW50ZXJ2YWwiLCJyZWxvYWQiLCJ0aW1lciIsIm1pbnV0ZXMiLCJzZWNvbmRzIiwiY2FsbFRpbWVvdXQiLCJwYXRobmFtZSIsInNob3dIaWRlQ29udGVudCJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQUEsYUFBQSxDQUNBQyxnQkFBQSwwQkFDQUMsT0FBQSxpQkFDQUMsR0FBQSxNQUNBQyxPQUFBLE9BQ0FDLE9BQUEsT0FDQUMsc0JBQUEseUJBR0FDLHFCQUFBLENBQ0FDLFFBQUEsSUFDQUMsUUFBQSxFQUNBQyxPQUFBLHFCQUdB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Q0FFQSxTQUFBQyxjQUNBTCxjQUFBYixjQUNBRyxhQUFBSSxRQUFBLE1BQUF0TSxTQUFBa04sVUFDQWxOLFNBQUFDLEtBQUEsVUFDQSxDQUVBLFNBQUFvTSxrQkFDQSxJQUFBN1csTUFBQUMsVUFBQW1ILE9BQUFvUCxRQUNBLElBRUEsS0FDQUUsYUFBQUksUUFBQSxNQUFBdE0sU0FBQWtOLFVBQ0FOLGNBQUFiLGNBQ0EvTCxTQUFBNk0sU0FFQSxDQTNEQWxYLEVBQUEsaUJBQUErSCxHQUFBLGNBQ0FrUCxjQUFBYixjQUNBRyxhQUFBSSxRQUFBLFlBQ0F0TSxTQUFBNk0sUUFBQSxJQUdBbFgsRUFBQSxrQkFBQStILEdBQUEsY0FDQWtQLGNBQUFiLGNBQ0EvTCxTQUFBQyxLQUFBLGNBdURBLElBQUFrTixnQkFBQSxJQUFBbFgsTUFBQTJOLGdCQUNBdUosZ0JBQUFoVCxPQUVBbEUsTUFBQUMsUUFBQWlFIiwiZmlsZSI6ImFwcC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgQ09PS0lFX05BTUVTID0ge1xuICBQUkVGRVJFTkNFU19TRVQ6ICdjb29raWVzX3ByZWZlcmVuY2VzX3NldCcsXG4gIFBPTElDWTogJ2Nvb2tpZXNfcG9saWN5JyxcbiAgR0E6ICdfZ2EnLFxuICBHQV9HSUQ6ICdfZ2lkJyxcbiAgR0FfR0FUOiAnX2dhdCcsXG4gIFVTRVJfQkFOTkVSX0xBU1RfU0VFTjogJ3VzZXJfYmFubmVyX2xhc3Rfc2Vlbidcbn07XG5cbnZhciBHT1ZVS19DT09LSUVfT1BUSU9OUyA9IHtcbiAgZXhwaXJlczogMzY1LCAvLyBkYXlzXG4gIHNlY3VyZTogdHJ1ZSxcbiAgZG9tYWluOiAnLmVkdWNhdGlvbi5nb3YudWsnXG59O1xuXG52YXIgR292VUtDb29raWUgPSB7XG4gIGdldFJhdzogZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBpZiAoIXdpbmRvdy5Db29raWVzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmV0dXJuIHdpbmRvdy5Db29raWVzLmdldChuYW1lKTtcbiAgfSxcbiAgZ2V0OiBmdW5jdGlvbiAobmFtZSkge1xuICAgIGlmICghd2luZG93LkNvb2tpZXMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgdmFsdWUgPSB3aW5kb3cuQ29va2llcy5nZXQobmFtZSk7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICByZXR1cm4gSlNPTi5wYXJzZSh2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgICBpZiAoIXdpbmRvdy5Db29raWVzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmV0dXJuIHdpbmRvdy5Db29raWVzLnNldChcbiAgICAgIG5hbWUsXG4gICAgICB2YWx1ZSxcbiAgICAgIEdPVlVLX0NPT0tJRV9PUFRJT05TXG4gICAgKTtcbiAgfSxcbiAgcmVtb3ZlOiBmdW5jdGlvbiAobmFtZSkge1xuICAgIGlmICghd2luZG93LkNvb2tpZXMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZXR1cm4gd2luZG93LkNvb2tpZXMucmVtb3ZlKFxuICAgICAgbmFtZSxcbiAgICAgIEdPVlVLX0NPT0tJRV9PUFRJT05TXG4gICAgKTtcbiAgfVxufTtcblxuLy8gZnVuY3Rpb24gdGhhdCB3aWxsIHJlbW92ZSBhbnkgZXhpc3RpbmcgdHJhY2tpbmcgY29va2llcyBvbiBwYWdlIGxvYWRcbihmdW5jdGlvbiAoKSB7XG4gIEdvdlVLQ29va2llLnJlbW92ZShDT09LSUVfTkFNRVMuUE9MSUNZKTtcbiAgR292VUtDb29raWUucmVtb3ZlKENPT0tJRV9OQU1FUy5QUkVGRVJFTkNFU19TRVQpO1xuICBHb3ZVS0Nvb2tpZS5yZW1vdmUoQ09PS0lFX05BTUVTLkdBKTtcbiAgR292VUtDb29raWUucmVtb3ZlKENPT0tJRV9OQU1FUy5HQV9HQVQpO1xuICBHb3ZVS0Nvb2tpZS5yZW1vdmUoQ09PS0lFX05BTUVTLkdBX0dJRCk7XG59KSgpO1xuXG5cbi8qKlxuICogU2VjdGlvbiB0byBoYW5kbGUgcmV2aWV3IHVzZXJzIGJhbm5lclxuICogSXQgdXNlcyBhIGRlZGljYXRlZCBjb29raWUgJ3VzZXJfYmFubmVyX2xhc3Rfc2VlbidcbiAqL1xuXG5mdW5jdGlvbiBjaGVja0NvbmRpdGlvbkZvclVzZXJzQmFubmVyKCkge1xuICB2YXIgbGFzdFNlZW4gPSBHb3ZVS0Nvb2tpZS5nZXRSYXcoQ09PS0lFX05BTUVTLlVTRVJfQkFOTkVSX0xBU1RfU0VFTik7XG4gIGlmICghIWxhc3RTZWVuKSB7XG4gICAgdmFyIG51bWJlck9mRGF5cyA9IChuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIGxhc3RTZWVuKSAvICgxMDAwICogMzYwMCAqIDI0KTtcbiAgICBpZiAobnVtYmVyT2ZEYXlzID4gOTApIHtcbiAgICAgIC8vIGlmIHRoZSBwZXJpb2QgaXMgbG9uZ2VyIHRoYW4gOTAgZGF5cyBzaG93L3VwZGF0ZSB0aGUgYmFubmVyXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gaWYgdGhlcmUgaXMgbm8gdmFsdWUgdGhlbiBzaG93L3VwZGF0ZSB0aGUgYmFubmVyXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBzaG93UmV2aWV3VXNlcnNCYW5uZXIoKSB7XG4gICQoJyNyZXZpZXctdXNlcnMtYmFubmVyJykuc2hvdygpO1xufVxuXG5mdW5jdGlvbiBzZXRSZXZpZXdVc2Vyc0Jhbm5lckxhc3RTZWVuKCkge1xuICBHb3ZVS0Nvb2tpZS5zZXQoQ09PS0lFX05BTUVTLlVTRVJfQkFOTkVSX0xBU1RfU0VFTiwgbmV3IERhdGUoKS5nZXRUaW1lKCkpO1xufVxuXG5mdW5jdGlvbiBsb2FkUmV2aWV3VXNlcnNCYW5uZXIoKSB7XG4gIGlmIChjaGVja0NvbmRpdGlvbkZvclVzZXJzQmFubmVyKCkpIHtcbiAgICBzaG93UmV2aWV3VXNlcnNCYW5uZXIoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGVDb29raWVSZXZpZXdVc2Vyc0Jhbm5lcigpIHtcbiAgaWYgKGNoZWNrQ29uZGl0aW9uRm9yVXNlcnNCYW5uZXIoKSkge1xuICAgIHNldFJldmlld1VzZXJzQmFubmVyTGFzdFNlZW4oKTtcbiAgfVxufVxuIiwiLy8gPGRldGFpbHM+IHBvbHlmaWxsXG4vLyBodHRwOi8vY2FuaXVzZS5jb20vI2ZlYXQ9ZGV0YWlsc1xuXG4vLyBGRiBTdXBwb3J0IGZvciBIVE1MNSdzIDxkZXRhaWxzPiBhbmQgPHN1bW1hcnk+XG4vLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD01OTE3MzdcblxuLy8gaHR0cDovL3d3dy5zaXRlcG9pbnQuY29tL2ZpeGluZy10aGUtZGV0YWlscy1lbGVtZW50L1xuXG47KGZ1bmN0aW9uIChnbG9iYWwpIHtcbiAgJ3VzZSBzdHJpY3QnXG5cbiAgdmFyIEdPVlVLID0gZ2xvYmFsLkdPVlVLIHx8IHt9XG5cbiAgR09WVUsuZGV0YWlscyA9IHtcbiAgICBOQVRJVkVfREVUQUlMUzogdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RldGFpbHMnKS5vcGVuID09PSAnYm9vbGVhbicsXG4gICAgS0VZX0VOVEVSOiAxMyxcbiAgICBLRVlfU1BBQ0U6IDMyLFxuXG4gICAgLy8gQ3JlYXRlIGEgc3RhcnRlZCBmbGFnIHNvIHdlIGNhbiBwcmV2ZW50IHRoZSBpbml0aWFsaXNhdGlvblxuICAgIC8vIGZ1bmN0aW9uIGZpcmluZyBmcm9tIGJvdGggRE9NQ29udGVudExvYWRlZCBhbmQgd2luZG93Lm9ubG9hZFxuICAgIHN0YXJ0ZWQ6IGZhbHNlLFxuXG4gICAgLy8gQWRkIGV2ZW50IGNvbnN0cnVjdCBmb3IgbW9kZXJuIGJyb3dzZXJzIG9yIElFXG4gICAgLy8gd2hpY2ggZmlyZXMgdGhlIGNhbGxiYWNrIHdpdGggYSBwcmUtY29udmVydGVkIHRhcmdldCByZWZlcmVuY2VcbiAgICBhZGRFdmVudDogZnVuY3Rpb24gKG5vZGUsIHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgICBpZiAobm9kZS5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGNhbGxiYWNrKGUsIGUudGFyZ2V0KVxuICAgICAgICB9LCBmYWxzZSlcbiAgICAgIH0gZWxzZSBpZiAobm9kZS5hdHRhY2hFdmVudCkge1xuICAgICAgICBub2RlLmF0dGFjaEV2ZW50KCdvbicgKyB0eXBlLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGNhbGxiYWNrKGUsIGUuc3JjRWxlbWVudClcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgcmVtb3ZlRXZlbnQ6IGZ1bmN0aW9uIChub2RlLCB0eXBlKSB7XG4gICAgICBpZiAobm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKSB7XG4gICAgICAgIG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICB9LCBmYWxzZSlcbiAgICAgIH0gZWxzZSBpZiAobm9kZS5kZXRhY2hFdmVudCkge1xuICAgICAgICBub2RlLmRldGFjaEV2ZW50KCdvbicgKyB0eXBlLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvLyBDcm9zcy1icm93c2VyIGNoYXJhY3RlciBjb2RlIC8ga2V5IHByZXNzZWRcbiAgICBjaGFyQ29kZTogZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJldHVybiAodHlwZW9mIGUud2hpY2ggPT09ICdudW1iZXInKSA/IGUud2hpY2ggOiBlLmtleUNvZGVcbiAgICB9LFxuXG4gICAgLy8gQ3Jvc3MtYnJvd3NlciBwcmV2ZW50aW5nIGRlZmF1bHQgYWN0aW9uXG4gICAgcHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoZS5wcmV2ZW50RGVmYXVsdCkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGUucmV0dXJuVmFsdWUgPSBmYWxzZVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvLyBIYW5kbGUgY3Jvc3MtbW9kYWwgY2xpY2sgZXZlbnRzXG4gICAgYWRkQ2xpY2tFdmVudDogZnVuY3Rpb24gKG5vZGUsIGNhbGxiYWNrKSB7XG4gICAgICBHT1ZVSy5kZXRhaWxzLmFkZEV2ZW50KG5vZGUsICdrZXlwcmVzcycsIGZ1bmN0aW9uIChlLCB0YXJnZXQpIHtcbiAgICAgICAgLy8gV2hlbiB0aGUga2V5IGdldHMgcHJlc3NlZCAtIGNoZWNrIGlmIGl0IGlzIGVudGVyIG9yIHNwYWNlXG4gICAgICAgIGlmIChHT1ZVSy5kZXRhaWxzLmNoYXJDb2RlKGUpID09PSBHT1ZVSy5kZXRhaWxzLktFWV9FTlRFUiB8fCBHT1ZVSy5kZXRhaWxzLmNoYXJDb2RlKGUpID09PSBHT1ZVSy5kZXRhaWxzLktFWV9TUEFDRSkge1xuICAgICAgICAgIGlmICh0YXJnZXQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3N1bW1hcnknKSB7XG4gICAgICAgICAgICAvLyBQcmV2ZW50IHNwYWNlIGZyb20gc2Nyb2xsaW5nIHRoZSBwYWdlXG4gICAgICAgICAgICAvLyBhbmQgZW50ZXIgZnJvbSBzdWJtaXR0aW5nIGEgZm9ybVxuICAgICAgICAgICAgR09WVUsuZGV0YWlscy5wcmV2ZW50RGVmYXVsdChlKVxuICAgICAgICAgICAgLy8gQ2xpY2sgdG8gbGV0IHRoZSBjbGljayBldmVudCBkbyBhbGwgdGhlIG5lY2Vzc2FyeSBhY3Rpb25cbiAgICAgICAgICAgIGlmICh0YXJnZXQuY2xpY2spIHtcbiAgICAgICAgICAgICAgdGFyZ2V0LmNsaWNrKClcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIGV4Y2VwdCBTYWZhcmkgNS4xIGFuZCB1bmRlciBkb24ndCBzdXBwb3J0IC5jbGljaygpIGhlcmVcbiAgICAgICAgICAgICAgY2FsbGJhY2soZSwgdGFyZ2V0KVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSlcblxuICAgICAgLy8gUHJldmVudCBrZXl1cCB0byBwcmV2ZW50IGNsaWNraW5nIHR3aWNlIGluIEZpcmVmb3ggd2hlbiB1c2luZyBzcGFjZSBrZXlcbiAgICAgIEdPVlVLLmRldGFpbHMuYWRkRXZlbnQobm9kZSwgJ2tleXVwJywgZnVuY3Rpb24gKGUsIHRhcmdldCkge1xuICAgICAgICBpZiAoR09WVUsuZGV0YWlscy5jaGFyQ29kZShlKSA9PT0gR09WVUsuZGV0YWlscy5LRVlfU1BBQ0UpIHtcbiAgICAgICAgICBpZiAodGFyZ2V0Lm5vZGVOYW1lID09PSAnU1VNTUFSWScpIHtcbiAgICAgICAgICAgIEdPVlVLLmRldGFpbHMucHJldmVudERlZmF1bHQoZSlcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pXG5cbiAgICAgIEdPVlVLLmRldGFpbHMuYWRkRXZlbnQobm9kZSwgJ2NsaWNrJywgZnVuY3Rpb24gKGUsIHRhcmdldCkge1xuICAgICAgICBjYWxsYmFjayhlLCB0YXJnZXQpXG4gICAgICB9KVxuICAgIH0sXG5cbiAgICAvLyBHZXQgdGhlIG5lYXJlc3QgYW5jZXN0b3IgZWxlbWVudCBvZiBhIG5vZGUgdGhhdCBtYXRjaGVzIGEgZ2l2ZW4gdGFnIG5hbWVcbiAgICBnZXRBbmNlc3RvcjogZnVuY3Rpb24gKG5vZGUsIG1hdGNoKSB7XG4gICAgICBkbyB7XG4gICAgICAgIGlmICghbm9kZSB8fCBub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG1hdGNoKSB7XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlXG4gICAgICB9IHdoaWxlIChub2RlKVxuXG4gICAgICByZXR1cm4gbm9kZVxuICAgIH0sXG5cbiAgICAvLyBJbml0aWFsaXNhdGlvbiBmdW5jdGlvblxuICAgIGFkZERldGFpbHNQb2x5ZmlsbDogZnVuY3Rpb24gKGxpc3QsIGNvbnRhaW5lcikge1xuICAgICAgY29udGFpbmVyID0gY29udGFpbmVyIHx8IGRvY3VtZW50LmJvZHlcbiAgICAgIC8vIElmIHRoaXMgaGFzIGFscmVhZHkgaGFwcGVuZWQsIGp1c3QgcmV0dXJuXG4gICAgICAvLyBlbHNlIHNldCB0aGUgZmxhZyBzbyBpdCBkb2Vzbid0IGhhcHBlbiBhZ2FpblxuICAgICAgaWYgKEdPVlVLLmRldGFpbHMuc3RhcnRlZCkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIEdPVlVLLmRldGFpbHMuc3RhcnRlZCA9IHRydWVcbiAgICAgIC8vIEdldCB0aGUgY29sbGVjdGlvbiBvZiBkZXRhaWxzIGVsZW1lbnRzLCBidXQgaWYgdGhhdCdzIGVtcHR5XG4gICAgICAvLyB0aGVuIHdlIGRvbid0IG5lZWQgdG8gYm90aGVyIHdpdGggdGhlIHJlc3Qgb2YgdGhlIHNjcmlwdGluZ1xuICAgICAgaWYgKChsaXN0ID0gY29udGFpbmVyLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdkZXRhaWxzJykpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIC8vIGVsc2UgaXRlcmF0ZSB0aHJvdWdoIHRoZW0gdG8gYXBwbHkgdGhlaXIgaW5pdGlhbCBzdGF0ZVxuICAgICAgdmFyIG4gPSBsaXN0Lmxlbmd0aFxuICAgICAgdmFyIGkgPSAwXG4gICAgICBmb3IgKGk7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgdmFyIGRldGFpbHMgPSBsaXN0W2ldXG5cbiAgICAgICAgLy8gU2F2ZSBzaG9ydGN1dHMgdG8gdGhlIGlubmVyIHN1bW1hcnkgYW5kIGNvbnRlbnQgZWxlbWVudHNcbiAgICAgICAgZGV0YWlscy5fX3N1bW1hcnkgPSBkZXRhaWxzLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzdW1tYXJ5JykuaXRlbSgwKVxuICAgICAgICBkZXRhaWxzLl9fY29udGVudCA9IGRldGFpbHMuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2RpdicpLml0ZW0oMClcblxuICAgICAgICBpZiAoIWRldGFpbHMuX19zdW1tYXJ5IHx8ICFkZXRhaWxzLl9fY29udGVudCkge1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIC8vIElmIHRoZSBjb250ZW50IGRvZXNuJ3QgaGF2ZSBhbiBJRCwgYXNzaWduIGl0IG9uZSBub3dcbiAgICAgICAgLy8gd2hpY2ggd2UnbGwgbmVlZCBmb3IgdGhlIHN1bW1hcnkncyBhcmlhLWNvbnRyb2xzIGFzc2lnbm1lbnRcbiAgICAgICAgaWYgKCFkZXRhaWxzLl9fY29udGVudC5pZCkge1xuICAgICAgICAgIGRldGFpbHMuX19jb250ZW50LmlkID0gJ2RldGFpbHMtY29udGVudC0nICsgaVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gQWRkIEFSSUEgcm9sZT1cImdyb3VwXCIgdG8gZGV0YWlsc1xuICAgICAgICBkZXRhaWxzLnNldEF0dHJpYnV0ZSgncm9sZScsICdncm91cCcpXG5cbiAgICAgICAgLy8gQWRkIHJvbGU9YnV0dG9uIHRvIHN1bW1hcnlcbiAgICAgICAgZGV0YWlscy5fX3N1bW1hcnkuc2V0QXR0cmlidXRlKCdyb2xlJywgJ2J1dHRvbicpXG5cbiAgICAgICAgLy8gQWRkIGFyaWEtY29udHJvbHNcbiAgICAgICAgZGV0YWlscy5fX3N1bW1hcnkuc2V0QXR0cmlidXRlKCdhcmlhLWNvbnRyb2xzJywgZGV0YWlscy5fX2NvbnRlbnQuaWQpXG5cbiAgICAgICAgLy8gU2V0IHRhYkluZGV4IHNvIHRoZSBzdW1tYXJ5IGlzIGtleWJvYXJkIGFjY2Vzc2libGUgZm9yIG5vbi1uYXRpdmUgZWxlbWVudHNcbiAgICAgICAgLy8gaHR0cDovL3d3dy5zYWxpZW5jZXMuY29tL2Jyb3dzZXJCdWdzL3RhYkluZGV4Lmh0bWxcbiAgICAgICAgaWYgKCFHT1ZVSy5kZXRhaWxzLk5BVElWRV9ERVRBSUxTKSB7XG4gICAgICAgICAgZGV0YWlscy5fX3N1bW1hcnkudGFiSW5kZXggPSAwXG4gICAgICAgIH1cblxuICAgICAgICAvLyBEZXRlY3QgaW5pdGlhbCBvcGVuIHN0YXRlXG4gICAgICAgIHZhciBvcGVuQXR0ciA9IGRldGFpbHMuZ2V0QXR0cmlidXRlKCdvcGVuJykgIT09IG51bGxcbiAgICAgICAgaWYgKG9wZW5BdHRyID09PSB0cnVlKSB7XG4gICAgICAgICAgZGV0YWlscy5fX3N1bW1hcnkuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgJ3RydWUnKVxuICAgICAgICAgIGRldGFpbHMuX19jb250ZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAnZmFsc2UnKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRldGFpbHMuX19zdW1tYXJ5LnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsICdmYWxzZScpXG4gICAgICAgICAgZGV0YWlscy5fX2NvbnRlbnQuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJylcbiAgICAgICAgICBpZiAoIUdPVlVLLmRldGFpbHMuTkFUSVZFX0RFVEFJTFMpIHtcbiAgICAgICAgICAgIGRldGFpbHMuX19jb250ZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDcmVhdGUgYSBjaXJjdWxhciByZWZlcmVuY2UgZnJvbSB0aGUgc3VtbWFyeSBiYWNrIHRvIGl0c1xuICAgICAgICAvLyBwYXJlbnQgZGV0YWlscyBlbGVtZW50LCBmb3IgY29udmVuaWVuY2UgaW4gdGhlIGNsaWNrIGhhbmRsZXJcbiAgICAgICAgZGV0YWlscy5fX3N1bW1hcnkuX19kZXRhaWxzID0gZGV0YWlsc1xuXG4gICAgICAgIC8vIElmIHRoaXMgaXMgbm90IGEgbmF0aXZlIGltcGxlbWVudGF0aW9uLCBjcmVhdGUgYW4gYXJyb3dcbiAgICAgICAgLy8gaW5zaWRlIHRoZSBzdW1tYXJ5XG4gICAgICAgIGlmICghR09WVUsuZGV0YWlscy5OQVRJVkVfREVUQUlMUykge1xuICAgICAgICAgIHZhciB0d2lzdHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpJylcblxuICAgICAgICAgIGlmIChvcGVuQXR0ciA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgdHdpc3R5LmNsYXNzTmFtZSA9ICdhcnJvdyBhcnJvdy1vcGVuJ1xuICAgICAgICAgICAgdHdpc3R5LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCdcXHUyNWJjJykpXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHR3aXN0eS5jbGFzc05hbWUgPSAnYXJyb3cgYXJyb3ctY2xvc2VkJ1xuICAgICAgICAgICAgdHdpc3R5LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCdcXHUyNWJhJykpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGV0YWlscy5fX3N1bW1hcnkuX190d2lzdHkgPSBkZXRhaWxzLl9fc3VtbWFyeS5pbnNlcnRCZWZvcmUodHdpc3R5LCBkZXRhaWxzLl9fc3VtbWFyeS5maXJzdENoaWxkKVxuICAgICAgICAgIGRldGFpbHMuX19zdW1tYXJ5Ll9fdHdpc3R5LnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAndHJ1ZScpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gQmluZCBhIGNsaWNrIGV2ZW50IHRvIGhhbmRsZSBzdW1tYXJ5IGVsZW1lbnRzXG4gICAgICBHT1ZVSy5kZXRhaWxzLmFkZENsaWNrRXZlbnQoY29udGFpbmVyLCBmdW5jdGlvbiAoZSwgc3VtbWFyeSkge1xuICAgICAgICBpZiAoIShzdW1tYXJ5ID0gR09WVUsuZGV0YWlscy5nZXRBbmNlc3RvcihzdW1tYXJ5LCAnc3VtbWFyeScpKSkge1xuICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEdPVlVLLmRldGFpbHMuc3RhdGVjaGFuZ2Uoc3VtbWFyeSlcbiAgICAgIH0pXG4gICAgfSxcblxuICAgIC8vIERlZmluZSBhIHN0YXRlY2hhbmdlIGZ1bmN0aW9uIHRoYXQgdXBkYXRlcyBhcmlhLWV4cGFuZGVkIGFuZCBzdHlsZS5kaXNwbGF5XG4gICAgLy8gQWxzbyB1cGRhdGUgdGhlIGFycm93IHBvc2l0aW9uXG4gICAgc3RhdGVjaGFuZ2U6IGZ1bmN0aW9uIChzdW1tYXJ5KSB7XG4gICAgICB2YXIgZXhwYW5kZWQgPSBzdW1tYXJ5Ll9fZGV0YWlscy5fX3N1bW1hcnkuZ2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJykgPT09ICd0cnVlJ1xuICAgICAgdmFyIGhpZGRlbiA9IHN1bW1hcnkuX19kZXRhaWxzLl9fY29udGVudC5nZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJykgPT09ICd0cnVlJ1xuXG4gICAgICBzdW1tYXJ5Ll9fZGV0YWlscy5fX3N1bW1hcnkuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgKGV4cGFuZGVkID8gJ2ZhbHNlJyA6ICd0cnVlJykpXG4gICAgICBzdW1tYXJ5Ll9fZGV0YWlscy5fX2NvbnRlbnQuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsIChoaWRkZW4gPyAnZmFsc2UnIDogJ3RydWUnKSlcblxuICAgICAgaWYgKCFHT1ZVSy5kZXRhaWxzLk5BVElWRV9ERVRBSUxTKSB7XG4gICAgICAgIHN1bW1hcnkuX19kZXRhaWxzLl9fY29udGVudC5zdHlsZS5kaXNwbGF5ID0gKGV4cGFuZGVkID8gJ25vbmUnIDogJycpXG5cbiAgICAgICAgdmFyIGhhc09wZW5BdHRyID0gc3VtbWFyeS5fX2RldGFpbHMuZ2V0QXR0cmlidXRlKCdvcGVuJykgIT09IG51bGxcbiAgICAgICAgaWYgKCFoYXNPcGVuQXR0cikge1xuICAgICAgICAgIHN1bW1hcnkuX19kZXRhaWxzLnNldEF0dHJpYnV0ZSgnb3BlbicsICdvcGVuJylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdW1tYXJ5Ll9fZGV0YWlscy5yZW1vdmVBdHRyaWJ1dGUoJ29wZW4nKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzdW1tYXJ5Ll9fdHdpc3R5KSB7XG4gICAgICAgIHN1bW1hcnkuX190d2lzdHkuZmlyc3RDaGlsZC5ub2RlVmFsdWUgPSAoZXhwYW5kZWQgPyAnXFx1MjViYScgOiAnXFx1MjViYycpXG4gICAgICAgIHN1bW1hcnkuX190d2lzdHkuc2V0QXR0cmlidXRlKCdjbGFzcycsIChleHBhbmRlZCA/ICdhcnJvdyBhcnJvdy1jbG9zZWQnIDogJ2Fycm93IGFycm93LW9wZW4nKSlcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9LFxuXG4gICAgZGVzdHJveTogZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIEdPVlVLLmRldGFpbHMucmVtb3ZlRXZlbnQobm9kZSwgJ2NsaWNrJylcbiAgICB9LFxuXG4gICAgLy8gQmluZCB0d28gbG9hZCBldmVudHMgZm9yIG1vZGVybiBhbmQgb2xkZXIgYnJvd3NlcnNcbiAgICAvLyBJZiB0aGUgZmlyc3Qgb25lIGZpcmVzIGl0IHdpbGwgc2V0IGEgZmxhZyB0byBibG9jayB0aGUgc2Vjb25kIG9uZVxuICAgIC8vIGJ1dCBpZiBpdCdzIG5vdCBzdXBwb3J0ZWQgdGhlbiB0aGUgc2Vjb25kIG9uZSB3aWxsIGZpcmVcbiAgICBpbml0OiBmdW5jdGlvbiAoJGNvbnRhaW5lcikge1xuICAgICAgR09WVUsuZGV0YWlscy5hZGRFdmVudChkb2N1bWVudCwgJ0RPTUNvbnRlbnRMb2FkZWQnLCBHT1ZVSy5kZXRhaWxzLmFkZERldGFpbHNQb2x5ZmlsbClcbiAgICAgIEdPVlVLLmRldGFpbHMuYWRkRXZlbnQod2luZG93LCAnbG9hZCcsIEdPVlVLLmRldGFpbHMuYWRkRGV0YWlsc1BvbHlmaWxsKVxuICAgIH1cbiAgfVxuICBnbG9iYWwuR09WVUsgPSBHT1ZVS1xufSkod2luZG93KVxuIiwiLyogZ2xvYmFsICQgKi9cblxuLy8gRVNMaW50IHJ1bGVzIGRpc2FibGVkIGZvciB0aGlzIGxpbmUgYXMgbGV0L2NvbnN0IGRvIG5vdCBhbGxvdyBmb3IgdGhlIHNhbWUgZnVuY3Rpb25hbGl0eS5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby12YXIsIG5vLXVzZS1iZWZvcmUtZGVmaW5lXG52YXIgTlNBID0gTlNBIHx8IHt9O1xuY29uc3QgZmlsdGVyQm94ZXMgPSAkKCcuZmlsdGVyLWJveCcpO1xuXG5OU0EuZmlsdGVycyA9IHtcbiAgaW5pdCgpIHtcbiAgICBmdW5jdGlvbiBjaGVja0NvdW50VGV4dChjaGVja2JveGVzKSB7XG4gICAgICByZXR1cm4gY2hlY2tib3hlcy5maWx0ZXIoJzpjaGVja2VkJykubGVuZ3RoID4gMCA/IGAke2NoZWNrYm94ZXMuZmlsdGVyKCc6Y2hlY2tlZCcpLmxlbmd0aH0gc2VsZWN0ZWRgIDogJyc7XG4gICAgfVxuXG4gICAgZmlsdGVyQm94ZXMuZWFjaCgoXywgZWxlbWVudCkgPT4ge1xuICAgICAgY29uc3QgZmlsdGVyQm94ID0gJChlbGVtZW50KTtcbiAgICAgIGNvbnN0IGhlYWRlciA9IGZpbHRlckJveC5maW5kKCcuY29udGFpbmVyLWhlYWQnKTtcbiAgICAgIGNvbnN0IHRpdGxlID0gaGVhZGVyLmZpbmQoJy5vcHRpb24tc2VsZWN0LWxhYmVsJyk7XG4gICAgICBjb25zdCBjaGVja2JveGVzID0gZmlsdGVyQm94LmZpbmQoJ2lucHV0OmNoZWNrYm94Jyk7XG4gICAgICBjb25zdCBidXR0b24gPSAkKCc8YnV0dG9uIC8+JykuYWRkQ2xhc3MoJ2pzLWNvbnRhaW5lci1oZWFkJyk7XG4gICAgICBjb25zdCBjaGVja0NvdW50ID0gJCgnPGRpdiAvPicpLmFkZENsYXNzKCdqcy1zZWxlY3RlZC1jb3VudGVyJykudGV4dCgoKSA9PiBjaGVja0NvdW50VGV4dChjaGVja2JveGVzKSk7XG5cbiAgICAgIGJ1dHRvbi5vbignY2xpY2snLCAoZSkgPT4ge1xuICAgICAgICBjb25zdCB0YXJnZXQgPSAkKGUuY3VycmVudFRhcmdldCk7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0YXJnZXQubmV4dCgpO1xuICAgICAgICBpZiAodGFyZ2V0Lmhhc0NsYXNzKCdjbG9zZWQnKSkge1xuICAgICAgICAgIG9wdGlvbnMuc2hvdygpO1xuICAgICAgICAgIHRhcmdldFxuICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdjbG9zZWQnKVxuICAgICAgICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCB0cnVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvcHRpb25zLmhpZGUoKTtcbiAgICAgICAgICB0YXJnZXRcbiAgICAgICAgICAgIC5hZGRDbGFzcygnY2xvc2VkJylcbiAgICAgICAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH0pLmFwcGVuZCh0aXRsZSwgY2hlY2tDb3VudCk7XG5cbiAgICAgIGhlYWRlci5yZXBsYWNlV2l0aChidXR0b24pO1xuXG4gICAgICBjaGVja2JveGVzLm9uKCdjaGFuZ2UnLCAoKSA9PiB7XG4gICAgICAgIGNoZWNrQ291bnQudGV4dCgoKSA9PiBjaGVja0NvdW50VGV4dChjaGVja2JveGVzKSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSxcbn07XG5cbmlmIChmaWx0ZXJCb3hlcy5sZW5ndGggPiAwKSB7XG4gIE5TQS5maWx0ZXJzLmluaXQoKTtcbn1cbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG4vKiBlc2xpbnQtZGlzYWJsZSBmdW5jLW5hbWVzICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlZiAqL1xuXG5mdW5jdGlvbiB0b0tlYmFiQ2FzZShzdHIpIHtcbiAgcmV0dXJuIHN0ci50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1xccysvZywgJy0nKTtcbn1cblxuZnVuY3Rpb24gaGlkZUVsZW1lbnQoKSB7XG4gICQodGhpcykuaGlkZSgpO1xufVxuXG5mdW5jdGlvbiB1bmNoZWNrQ2hlY2tib3goKSB7XG4gICQodGhpcykucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcbn1cblxuZnVuY3Rpb24gZXh0cmFjdFN0YXJ0aW5nTnVtYmVyRnJvbUlkKGVsZW1lbnRJZCkge1xuICBjb25zdCBlbGVtZW50ID0gJChgIyR7ZWxlbWVudElkfWApO1xuICBjb25zdCBzdGFydGluZ051bWJlciA9IHBhcnNlSW50KGVsZW1lbnQucHJvcCgnaWQnKS5zcGxpdCgnLScpLnBvcCgpLCAxMCk7XG4gIHJldHVybiBzdGFydGluZ051bWJlcjtcbn1cblxuZnVuY3Rpb24gZXh0cmFjdEZpcnN0UGFydEZyb21JZChpZCkge1xuICBjb25zdCBwYXJ0cyA9IGlkLnNwbGl0KCctJyk7XG4gIGlmIChwYXJ0cy5sZW5ndGggPj0gMikge1xuICAgIHBhcnRzLnBvcCgpO1xuICAgIHJldHVybiBgJHtwYXJ0cy5qb2luKCctJyl9LWA7XG4gIH1cbiAgcmV0dXJuIGlkO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVDb3VudChjYXRlZ29yeU5hbWUpIHtcbiAgY29uc3Qgc2FmZUNhdGVnb3J5TmFtZSA9IHRvS2ViYWJDYXNlKGNhdGVnb3J5TmFtZSk7XG4gIGNvbnN0IGNoZWNrZWRDb3VudCA9ICQoYC4ke3NhZmVDYXRlZ29yeU5hbWV9IC5nb3Z1ay1jaGVja2JveGVzX19pbnB1dDpjaGVja2VkYCkubGVuZ3RoO1xuXG4gICQoYCMke3NhZmVDYXRlZ29yeU5hbWV9LWNvdW50YCkudGV4dChjaGVja2VkQ291bnQpO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVDYXRlZ29yeUhlYWRlcihjYXRlZ29yeU5hbWUpIHtcbiAgY29uc3Qgc2FmZUNhdGVnb3J5TmFtZSA9IHRvS2ViYWJDYXNlKGNhdGVnb3J5TmFtZSk7XG4gIGNvbnN0IGNhdGVnb3J5SGVhZGVyID0gJChgIyR7c2FmZUNhdGVnb3J5TmFtZX0tdGV4dGApO1xuICBjb25zdCBpc0FueUNoZWNrZWRJbkNhdGVnb3J5ID1cbiAgICAkKGBpbnB1dFtpZF49J3Nob3ctaGlkZS0ke3NhZmVDYXRlZ29yeU5hbWV9J106Y2hlY2tlZGApLmxlbmd0aCA+IDA7XG4gIGNhdGVnb3J5SGVhZGVyLmNzcygnZGlzcGxheScsIGlzQW55Q2hlY2tlZEluQ2F0ZWdvcnkgPyAnYmxvY2snIDogJ25vbmUnKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlTm9GaWx0ZXJNZXNzYWdlKCkge1xuICBjb25zdCBpc0FueUNoZWNrZWRHbG9iYWwgPVxuICAgICQoJy5nb3Z1ay1jaGVja2JveGVzX19pbnB1dC5kZmUtZmlsdGVyLWlucHV0OmNoZWNrZWQnKS5sZW5ndGggPiAwO1xuICAkKCcjc2hvdy1oaWRlLXNlbGVjdGVkLWZpbHRlcnMnKS5jc3MoXG4gICAgJ2Rpc3BsYXknLFxuICAgIGlzQW55Q2hlY2tlZEdsb2JhbCA/ICdub25lJyA6ICdibG9jaycsXG4gICk7XG59XG5cbmZ1bmN0aW9uIHNob3dNZShib3hJZCwgY2F0ZWdvcnlOYW1lLCBjaGVja2VkRWxlbWVudElkKSB7XG4gIGNvbnN0IGlzQ2hlY2tlZCA9ICQoYCMke2NoZWNrZWRFbGVtZW50SWR9YCkucHJvcCgnY2hlY2tlZCcpO1xuICAkKGAjJHtib3hJZH1gKS5jc3MoJ2Rpc3BsYXknLCBpc0NoZWNrZWQgPyAnYmxvY2snIDogJ25vbmUnKTtcblxuICB1cGRhdGVDYXRlZ29yeUhlYWRlcihjYXRlZ29yeU5hbWUpO1xuICB1cGRhdGVOb0ZpbHRlck1lc3NhZ2UoKTtcbn1cblxuXG5mdW5jdGlvbiBmaWx0ZXJBbmRQZXJmb3JtQWN0aW9uKGZpcnN0UGFydE9mTGlzdElkLCBsaXN0SWRTdGFydGluZ051bWJlciwgcGVyZm9ybUFjdGlvbikge1xuICBjb25zdCBlbGVtZW50c1RvUHJvY2VzcyA9ICQoYFtpZF49XCIke2ZpcnN0UGFydE9mTGlzdElkfVwiXWApLmZpbHRlcihmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgaWQgPSBwYXJzZUludCh0aGlzLmlkLnNwbGl0KCctJykucG9wKCksIDEwKTtcbiAgICByZXR1cm4gIU51bWJlci5pc05hTihpZCkgJiYgaWQgPiBsaXN0SWRTdGFydGluZ051bWJlcjtcbiAgfSk7XG5cbiAgZWxlbWVudHNUb1Byb2Nlc3MuZWFjaChwZXJmb3JtQWN0aW9uKTtcbn1cblxuZnVuY3Rpb24gaGlkZU1lKGxpc3RJZCwgY2F0ZWdvcnlOYW1lLCBjaGVja2JveElkKSB7XG4gIGlmIChjYXRlZ29yeU5hbWUgPT09ICdMYXN0IGxvZ2luJykge1xuICAgIGNvbnN0IGxpc3RJZFN0YXJ0aW5nTnVtYmVyID0gZXh0cmFjdFN0YXJ0aW5nTnVtYmVyRnJvbUlkKGxpc3RJZCk7XG5cbiAgICBjb25zdCBmaXJzdFBhcnRPZkxpc3RJZCA9IGV4dHJhY3RGaXJzdFBhcnRGcm9tSWQobGlzdElkKTtcbiAgICBjb25zdCBmaXJzdFBhcnRPZkNoZWNrYm94SWQgPSBleHRyYWN0Rmlyc3RQYXJ0RnJvbUlkKGNoZWNrYm94SWQpO1xuXG4gICAgZmlsdGVyQW5kUGVyZm9ybUFjdGlvbihmaXJzdFBhcnRPZkxpc3RJZCwgbGlzdElkU3RhcnRpbmdOdW1iZXIsIGhpZGVFbGVtZW50KTtcbiAgICBmaWx0ZXJBbmRQZXJmb3JtQWN0aW9uKGZpcnN0UGFydE9mQ2hlY2tib3hJZCwgbGlzdElkU3RhcnRpbmdOdW1iZXIsIHVuY2hlY2tDaGVja2JveCk7XG5cbiAgICBjb25zdCBsYXN0TG9naW5DaGVja2JveGVzID0gJCgnLmxhc3QtbG9naW4tY2hlY2tib3hlcy1pbnB1dCcpO1xuICAgIGxhc3RMb2dpbkNoZWNrYm94ZXMucHJvcCgnZGlzYWJsZWQnLCBmYWxzZSk7XG4gIH1cbiAgJChgIyR7bGlzdElkfWApLmhpZGUoKTtcbiAgJChgIyR7Y2hlY2tib3hJZH1gKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpO1xuXG4gIHVwZGF0ZUNvdW50KGNhdGVnb3J5TmFtZSk7XG4gIHVwZGF0ZUNhdGVnb3J5SGVhZGVyKGNhdGVnb3J5TmFtZSk7XG4gIHVwZGF0ZU5vRmlsdGVyTWVzc2FnZSgpO1xufVxuXG5cbmZ1bmN0aW9uIGluaXRpYWxpemVGaWx0ZXJzKCkge1xuICAkKCcuZ292dWstY2hlY2tib3hlc19faW5wdXQuZGZlLWZpbHRlci1pbnB1dCcpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IGlzQ2hlY2tlZCA9ICQodGhpcykucHJvcCgnY2hlY2tlZCcpO1xuXG4gICAgaWYgKGlzQ2hlY2tlZCkge1xuICAgICAgY29uc3QgY2hlY2tib3hJZCA9ICQodGhpcykuYXR0cignaWQnKTtcbiAgICAgIGNvbnN0IHBhcnRzID0gY2hlY2tib3hJZC5tYXRjaCgvc2hvdy1oaWRlLSguKyktKFxcZCspLyk7XG4gICAgICBpZiAocGFydHMgJiYgcGFydHMubGVuZ3RoID09PSAzKSB7XG4gICAgICAgIGNvbnN0IGNhdGVnb3J5TmFtZSA9IHBhcnRzWzFdO1xuICAgICAgICBjb25zdCBpbmRleCA9IHBhcnRzWzJdO1xuICAgICAgICBjb25zdCBib3hJZCA9IGAke2NhdGVnb3J5TmFtZX0tb3B0aW9uLSR7aW5kZXh9YDtcblxuICAgICAgICBpZiAoY2F0ZWdvcnlOYW1lID09PSAnbGFzdC1sb2dpbicgJiYgaW5kZXggPT09ICc2Jykge1xuICAgICAgICAgIGNvbnN0IGxhc3RMb2dpbkNoZWNrYm94ZXMgPSAkKCcubGFzdC1sb2dpbi1jaGVja2JveGVzLWlucHV0Jyk7XG4gICAgICAgICAgbGFzdExvZ2luQ2hlY2tib3hlcy5zbGljZSgwLCBpbmRleCAtIDEpLnByb3AoJ2Rpc2FibGVkJywgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgc2hvd01lKGJveElkLCBjYXRlZ29yeU5hbWUsIGNoZWNrYm94SWQpO1xuICAgICAgICB1cGRhdGVDb3VudChjYXRlZ29yeU5hbWUpO1xuICAgICAgICB1cGRhdGVDYXRlZ29yeUhlYWRlcihjYXRlZ29yeU5hbWUpO1xuICAgICAgICB1cGRhdGVOb0ZpbHRlck1lc3NhZ2UoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuXG5cbmZ1bmN0aW9uIGhhbmRsZUxhc3RMb2dpbkNoZWNrYm94Q2hhbmdlKGNoZWNrYm94ZXMsIGxhc3RMb2dpbkxpc3RUYWdzKSB7XG4gIGNoZWNrYm94ZXMub24oJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBpbmRleCA9IGNoZWNrYm94ZXMuaW5kZXgodGhpcyk7XG4gICAgbGV0IGZpcnN0UGFydE9mQ2hlY2tib3hJZDtcbiAgICBpZiAodGhpcy5jaGVja2VkKSB7XG4gICAgICBzd2l0Y2ggKHRoaXMudmFsdWUpIHtcbiAgICAgICAgY2FzZSAnbmV2ZXInOlxuXG4gICAgICAgICAgbGFzdExvZ2luTGlzdFRhZ3MuY3NzKCdkaXNwbGF5JywgJ25vbmUnKTtcbiAgICAgICAgICBjaGVja2JveGVzLnNsaWNlKDAsIGluZGV4KS5wcm9wKCdjaGVja2VkJywgZmFsc2UpO1xuICAgICAgICAgIGNoZWNrYm94ZXMuc2xpY2UoMCwgaW5kZXgpLnByb3AoJ2Rpc2FibGVkJywgdHJ1ZSk7XG4gICAgICAgICAgaW5pdGlhbGl6ZUZpbHRlcnMoKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGNoZWNrYm94ZXMuc2xpY2UoMCwgaW5kZXgpLnByb3AoJ2NoZWNrZWQnLCB0cnVlKTtcbiAgICAgICAgICBpbml0aWFsaXplRmlsdGVycygpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmaXJzdFBhcnRPZkNoZWNrYm94SWQgPSBleHRyYWN0Rmlyc3RQYXJ0RnJvbUlkKHRoaXMuaWQpO1xuICAgICAgZmlsdGVyQW5kUGVyZm9ybUFjdGlvbihmaXJzdFBhcnRPZkNoZWNrYm94SWQsIGluZGV4ICsgMSwgdW5jaGVja0NoZWNrYm94KTtcbiAgICAgIGNoZWNrYm94ZXMuc2xpY2UoMCwgaW5kZXgpLnByb3AoJ2Rpc2FibGVkJywgZmFsc2UpO1xuICAgICAgZmlsdGVyQW5kUGVyZm9ybUFjdGlvbignbGFzdC1sb2dpbi1vcHRpb24tJywgaW5kZXggKyAxLCBoaWRlRWxlbWVudCk7XG4gICAgICB1cGRhdGVDb3VudCgnbGFzdC1sb2dpbicpO1xuICAgICAgdXBkYXRlQ2F0ZWdvcnlIZWFkZXIoJ2xhc3QtbG9naW4nKTtcbiAgICB9XG4gIH0pO1xufVxuXG4kKCgpID0+IHtcbiAgaW5pdGlhbGl6ZUZpbHRlcnMoKTtcblxuICBjb25zdCBsYXN0TG9naW5DaGVja2JveGVzID0gJCgnLmxhc3QtbG9naW4tY2hlY2tib3hlcy1pbnB1dCcpO1xuICBjb25zdCBsYXN0TG9naW5MaXN0VGFncyA9ICQoJy5sYXN0LWxvZ2luLW9wdGlvbicpO1xuXG4gIGxhc3RMb2dpbkNoZWNrYm94ZXMub24oJ2NsaWNrJywgKCkgPT4ge1xuICAgIGhhbmRsZUxhc3RMb2dpbkNoZWNrYm94Q2hhbmdlKGxhc3RMb2dpbkNoZWNrYm94ZXMsIGxhc3RMb2dpbkxpc3RUYWdzKTtcbiAgfSk7XG59KTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgTlNBID0gTlNBIHx8IHt9O1xuXG5OU0EubW9kYWwgPSB7XG4gIGVsZW1zOiB7XG4gICAgbGlua3M6ICQoJy5tb2RhbC1saW5rJyksXG4gICAgbW9kYWxzOiAkKCcubW9kYWwnKVxuICB9LFxuICBpbml0OiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5tb2RhbEJnKCk7XG4gICAgdGhpcy5zZXRVcEV2ZW50cygpO1xuICB9LFxuICBtb2RhbEJnOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgIHZhciBiZyA9ICQoJzxkaXY+JykuYWRkQ2xhc3MoJ21vZGFsLWJnJykuaGlkZSgpLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHsgdGhhdC5oaWRlTW9kYWxzKCk7IH0pO1xuICAgICQoJ2JvZHknKS5hcHBlbmQoYmcpO1xuICB9LFxuICBzZXRVcEV2ZW50czogZnVuY3Rpb24gKCkge1xuICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICB0aGlzLmVsZW1zLmxpbmtzLm9uKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgdGFyZ2V0ID0gJCh0aGlzKS5hdHRyKCdocmVmJyk7XG4gICAgICB0aGF0LnNob3dNb2RhbCgkKHRhcmdldCkpO1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH0pO1xuXG4gICAgdGhhdC5lbGVtcy5tb2RhbHMuZmluZCgnLmNsb3NlJykub24oJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgIHRoYXQuaGlkZU1vZGFscygpO1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH0pO1xuXG4gICAgJCgnYm9keScpLm9uKCdrZXlkb3duJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmICgoZS5rZXlDb2RlIHx8IGUud2hpY2gpID09PSAyNylcbiAgICAgICAgdGhhdC5oaWRlTW9kYWxzKCk7XG4gICAgfSk7XG4gIH0sXG4gIHNob3dNb2RhbDogZnVuY3Rpb24gKG1vZGFsKSB7XG4gICAgJCgnaHRtbCcpLmFkZENsYXNzKCdtb2RhbC1vcGVuJyk7XG4gICAgJCgnLm1vZGFsLWJnJykuc2hvdygpO1xuICAgIG1vZGFsLnNob3coKTtcbiAgfSxcbiAgaGlkZU1vZGFsczogZnVuY3Rpb24gKCkge1xuICAgICQoJ2h0bWwnKS5yZW1vdmVDbGFzcygnbW9kYWwtb3BlbicpO1xuICAgICQoJy5tb2RhbC1iZycpLmhpZGUoKTtcbiAgICB0aGlzLmVsZW1zLm1vZGFscy5oaWRlKCk7XG4gIH1cbn1cblxuTlNBLm1vZGFsLmluaXQoKTtcbiIsIi8qIGdsb2JhbCB3aW5kb3cgKi9cbi8qIGdsb2JhbCAkICovXG5cbmNvbnN0IFJFU1BPTlNFX1RZUEVfQ09ERSA9ICdjb2RlJztcbmNvbnN0IFJFU1BPTlNFX1RZUEVfSURfVE9LRU4gPSAnSUQgdG9rZW4nO1xuY29uc3QgUkVTUE9OU0VfVFlQRV9UT0tFTiA9ICd0b2tlbic7XG5cbmNvbnN0IEZMT1dfVFlQRV9JTVBMSUNJVCA9ICdpbXBsaWNpdCc7XG5jb25zdCBGTE9XX1RZUEVfQVVUSE9SSVpBVElPTiA9ICdhdXRob3JpemF0aW9uJztcbmNvbnN0IEZMT1dfVFlQRV9IWUJSSUQgPSAnaHlicmlkJztcblxuJCgoKSA9PiB7XG4gIGNvbnN0IGNyZWF0ZVNlcnZpY2VDb25maWdVcmxTZWN0aW9ucyA9IChzZWN0aW9uSWQsIGZvcm1Hcm91cFNlbGVjdG9yLCBsYWJlbFRleHQpID0+IHtcbiAgICBjb25zdCBhZGRCdXR0b24gPSAkKGAjJHtzZWN0aW9uSWR9LWFkZGApO1xuICAgIGNvbnN0IGZvcm1Hcm91cCA9ICQoYCR7Zm9ybUdyb3VwU2VsZWN0b3J9YCk7XG5cbiAgICBhZGRCdXR0b24ub24oJ2NsaWNrJywgZnVuY3Rpb24gYWRkSW5wdXRGSWVsZCgpIHtcbiAgICAgIGxldCBjb3VudGVyID0gcGFyc2VJbnQoZm9ybUdyb3VwLmRhdGEoYCR7c2VjdGlvbklkfS1jb3VudGVyYCksIDEwKTtcbiAgICAgIGNvbnN0IG5ld0lucHV0SWQgPSBgJHtzZWN0aW9uSWR9LSR7Y291bnRlcn1gO1xuICAgICAgY29uc3QgbmV3RWxlbWVudCA9IGBcbiAgICAgIDxkaXYgY2xhc3M9XCJnb3Z1ay1ib2R5IGRmZS1mbGV4LWNvbnRhaW5lclwiIGlkPVwiJHtzZWN0aW9uSWR9LWlucHV0LWdyb3VwLSR7Y291bnRlcn1cIj5cbiAgICAgICAgPGxhYmVsIGZvcj1cIiR7bmV3SW5wdXRJZH1cIiBjbGFzcz1cImdvdnVrLWxhYmVsIGdvdnVrLWxhYmVsLS1zIGdvdnVrLXZpc3VhbGx5LWhpZGRlblwiPlxuICAgICAgICAgICR7bGFiZWxUZXh0fVxuICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8aW5wdXRcbiAgICAgICAgICBjbGFzcz1cImZvcm0tY29udHJvbCBkZmUtZmxleC1pbnB1dC1ncm93IGdvdnVrLWlucHV0XCJcbiAgICAgICAgICBpZD1cIiR7bmV3SW5wdXRJZH1cIlxuICAgICAgICAgIG5hbWU9XCIke3NlY3Rpb25JZH1cIlxuICAgICAgICAvPlxuICAgICAgICA8YSBocmVmPVwiI1wiIGNsYXNzPVwiZ292dWstbGluayBnb3Z1ay1saW5rLS1uby12aXNpdGVkLXN0YXRlIHJlbW92ZS1yZWRpcmVjdFwiIGlkPVwiJHtzZWN0aW9uSWR9LXJlbW92ZS0ke2NvdW50ZXJ9XCIgZGF0YS1ncm91cC1pZD1cIiR7Y291bnRlcn1cIj5SZW1vdmU8L2E+XG4gICAgICA8L2Rpdj5gO1xuXG4gICAgICAkKG5ld0VsZW1lbnQpLmFwcGVuZFRvKGZvcm1Hcm91cCk7XG4gICAgICBjb3VudGVyICs9IDE7XG4gICAgICBmb3JtR3JvdXAuZGF0YShgJHtzZWN0aW9uSWR9LWNvdW50ZXJgLCBjb3VudGVyKTtcbiAgICAgICQodGhpcykudHJpZ2dlcignYmx1cicpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0pO1xuXG4gICAgZm9ybUdyb3VwLm9uKCdjbGljaycsICcucmVtb3ZlLXJlZGlyZWN0JywgZnVuY3Rpb24gcmVtb3ZlSW5wdXQoZSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgY29uc3QgZ3JvdXBJZCA9ICQodGhpcykuZGF0YSgnZ3JvdXAtaWQnKTtcbiAgICAgICQoYCMke3NlY3Rpb25JZH0taW5wdXQtZ3JvdXAtJHtncm91cElkfWApLnJlbW92ZSgpO1xuICAgICAgJCh0aGlzKS50cmlnZ2VyKCdibHVyJyk7XG5cbiAgICAgIGNvbnN0IG5ld0NvdW50ZXIgPSBmb3JtR3JvdXAuZmluZCgnLmRmZS1mbGV4LWNvbnRhaW5lcicpLmxlbmd0aDtcbiAgICAgIGZvcm1Hcm91cC5kYXRhKGAke3NlY3Rpb25JZH0tY291bnRlcmAsIG5ld0NvdW50ZXIpO1xuICAgIH0pO1xuICB9O1xuXG4gIGNyZWF0ZVNlcnZpY2VDb25maWdVcmxTZWN0aW9ucygncmVkaXJlY3RfdXJpcycsICcjcmVkaXJlY3RfdXJpcy1mb3JtLWdyb3VwJywgJ1JlZGlyZWN0IFVSTCcpO1xuICBjcmVhdGVTZXJ2aWNlQ29uZmlnVXJsU2VjdGlvbnMoJ3Bvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaXMnLCAnI3Bvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaXMtZm9ybS1ncm91cCcsICdMb2dvdXQgcmVkaXJlY3QgVVJMJyk7XG5cblxuICBmdW5jdGlvbiBoYW5kbGVTZWNyZXRHZW5lcmF0aW9uKGV2ZW50SWQsIGlucHV0SWQsIGNvbmZpcm1NZXNzYWdlKSB7XG4gICAgJChldmVudElkKS5vbignY2xpY2snLCBmdW5jdGlvbiBnZW5lcmF0ZVNlY3JldCgpIHtcbiAgICAgIGNvbnN0IHNlY3JldEFycmF5ID0gd2luZG93Lm5pY2V3YXJlLmdlbmVyYXRlUGFzc3BocmFzZSg4KTtcbiAgICAgIGNvbnN0IHNlY3JldCA9IHNlY3JldEFycmF5LmpvaW4oJy0nKTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLWdsb2JhbHMsIG5vLWFsZXJ0XG4gICAgICBjb25zdCBpc0NvbmZpcm0gPSB3aW5kb3cuY29uZmlybShjb25maXJtTWVzc2FnZSk7XG4gICAgICBpZiAoaXNDb25maXJtKSB7XG4gICAgICAgICQoYGlucHV0IyR7aW5wdXRJZH1gKS5hdHRyKCd2YWx1ZScsIHNlY3JldCk7XG4gICAgICB9XG4gICAgICAkKHRoaXMpLnRyaWdnZXIoJ2JsdXInKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9KTtcbiAgfVxuXG4gIGhhbmRsZVNlY3JldEdlbmVyYXRpb24oJyNnZW5lcmF0ZS1jbGllbnRTZWNyZXQnLCAnY2xpZW50U2VjcmV0JywgJ0FyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byByZWdlbmVyYXRlIHRoZSBjbGllbnQgc2VjcmV0PycpO1xuICBoYW5kbGVTZWNyZXRHZW5lcmF0aW9uKCcjZ2VuZXJhdGUtYXBpU2VjcmV0JywgJ2FwaVNlY3JldCcsICdBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gcmVnZW5lcmF0ZSB0aGUgQVBJIHNlY3JldD8nKTtcblxuICBmdW5jdGlvbiB1cGRhdGVTZWN0aW9ucygpIHtcbiAgICBjb25zdCBzZWxlY3RlZFR5cGVzID0gW107XG5cbiAgICBpZiAoJCgnI3Jlc3BvbnNlX3R5cGVzLWlkX3Rva2VuJykuaXMoJzpjaGVja2VkJykpIHtcbiAgICAgIHNlbGVjdGVkVHlwZXMucHVzaChSRVNQT05TRV9UWVBFX0lEX1RPS0VOKTtcbiAgICB9XG5cbiAgICBpZiAoJCgnI3Jlc3BvbnNlX3R5cGVzLXRva2VuJykuaXMoJzpjaGVja2VkJykpIHtcbiAgICAgIHNlbGVjdGVkVHlwZXMucHVzaChSRVNQT05TRV9UWVBFX1RPS0VOKTtcbiAgICB9XG5cbiAgICBpZiAoJCgnI3Jlc3BvbnNlX3R5cGVzLWNvZGUnKS5pcygnOmNoZWNrZWQnKSkge1xuICAgICAgc2VsZWN0ZWRUeXBlcy5wdXNoKFJFU1BPTlNFX1RZUEVfQ09ERSk7XG4gICAgfVxuXG4gICAgbGV0IHdhcm5pbmdNZXNzYWdlID0gJyc7XG5cbiAgICBpZiAoc2VsZWN0ZWRUeXBlcy5sZW5ndGggPiAwKSB7XG4gICAgICBzZWxlY3RlZFR5cGVzLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgY29uc3Qgb3JkZXIgPSBbUkVTUE9OU0VfVFlQRV9DT0RFLCBSRVNQT05TRV9UWVBFX0lEX1RPS0VOLCBSRVNQT05TRV9UWVBFX1RPS0VOXTtcbiAgICAgICAgcmV0dXJuIG9yZGVyLmluZGV4T2YoYSkgLSBvcmRlci5pbmRleE9mKGIpO1xuICAgICAgfSk7XG5cbiAgICAgIGxldCBmbG93VHlwZSA9IEZMT1dfVFlQRV9JTVBMSUNJVDtcblxuICAgICAgaWYgKHNlbGVjdGVkVHlwZXMubGVuZ3RoID09PSAxICYmIHNlbGVjdGVkVHlwZXMuaW5jbHVkZXMoUkVTUE9OU0VfVFlQRV9DT0RFKSkge1xuICAgICAgICBmbG93VHlwZSA9IEZMT1dfVFlQRV9BVVRIT1JJWkFUSU9OO1xuICAgICAgfSBlbHNlIGlmICgoc2VsZWN0ZWRUeXBlcy5pbmNsdWRlcyhSRVNQT05TRV9UWVBFX0NPREUpICYmXG4gICAgICBzZWxlY3RlZFR5cGVzLmluY2x1ZGVzKFJFU1BPTlNFX1RZUEVfVE9LRU4pKSB8fFxuICAgICAgICAgICAgKHNlbGVjdGVkVHlwZXMuaW5jbHVkZXMoUkVTUE9OU0VfVFlQRV9DT0RFKSAmJlxuICAgICAgICAgICAgc2VsZWN0ZWRUeXBlcy5pbmNsdWRlcyhSRVNQT05TRV9UWVBFX0lEX1RPS0VOKSkpIHtcbiAgICAgICAgZmxvd1R5cGUgPSBGTE9XX1RZUEVfSFlCUklEO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2VsZWN0ZWRUeXBlcy5sZW5ndGggPT09IDEgJiYgc2VsZWN0ZWRUeXBlcy5pbmNsdWRlcyhSRVNQT05TRV9UWVBFX1RPS0VOKSkge1xuICAgICAgICB3YXJuaW5nTWVzc2FnZSA9ICcnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IHNlbGVjdGVkVHlwZXNEaXNwbGF5O1xuXG4gICAgICAgIGlmIChzZWxlY3RlZFR5cGVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBjb25zdCBhbGxCdXRMYXN0ID0gc2VsZWN0ZWRUeXBlcy5zbGljZSgwLCAtMSkuam9pbignLCAnKTtcbiAgICAgICAgICBjb25zdCBsYXN0ID0gc2VsZWN0ZWRUeXBlc1tzZWxlY3RlZFR5cGVzLmxlbmd0aCAtIDFdO1xuICAgICAgICAgIHNlbGVjdGVkVHlwZXNEaXNwbGF5ID0gYCR7YWxsQnV0TGFzdH0gYW5kICR7bGFzdH1gO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIFtzZWxlY3RlZFR5cGVzRGlzcGxheV0gPSBzZWxlY3RlZFR5cGVzO1xuICAgICAgICB9XG5cbiAgICAgICAgd2FybmluZ01lc3NhZ2UgPSBgXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZ292dWstd2FybmluZy10ZXh0IGdvdnVrLSEtbWFyZ2luLXRvcC01IGdvdnVrLSEtbWFyZ2luLWJvdHRvbS0wXCIgaWQ9XCJ3YXJuaW5nLXJlc3BvbnNlLXR5cGVzXCI+XG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJnb3Z1ay13YXJuaW5nLXRleHRfX2ljb25cIiBhcmlhLWhpZGRlbj1cInRydWVcIj4hPC9zcGFuPlxuICAgICAgICAgICAgICAgIDxzdHJvbmcgY2xhc3M9XCJnb3Z1ay13YXJuaW5nLXRleHRfX3RleHRcIj5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJnb3Z1ay13YXJuaW5nLXRleHRfX2Fzc2lzdGl2ZVwiPldhcm5pbmc8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIFlvdSBoYXZlIHNlbGVjdGVkICR7c2VsZWN0ZWRUeXBlc0Rpc3BsYXl9IGFzIHlvdXIgcmVzcG9uc2UgdHlwZS4gVGhpcyBtZWFucyAke2Zsb3dUeXBlfSBmbG93IGlzIHlvdXIgZmxvdy5cbiAgICAgICAgICAgICAgICA8L3N0cm9uZz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICBgO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJlbW92ZSBleGlzdGluZyB3YXJuaW5nLCBpZiBhbnlcbiAgICAkKCcjd2FybmluZy1yZXNwb25zZS10eXBlcycpLnJlbW92ZSgpO1xuXG4gICAgLy8gQWRkIHRoZSBuZXcgd2FybmluZ1xuICAgIGlmICh3YXJuaW5nTWVzc2FnZSkge1xuICAgICAgJCgnI3Jlc3BvbnNlX3R5cGVzLWZpZWxkc2V0JykuYXBwZW5kKHdhcm5pbmdNZXNzYWdlKTtcbiAgICB9XG4gICAgY29uc3QgcmVzcG9uc2VUeXBlc0NvZGVFbGVtZW50ID0gJCgnI3Jlc3BvbnNlX3R5cGVzLWNvZGUnKTtcbiAgICBpZiAocmVzcG9uc2VUeXBlc0NvZGVFbGVtZW50Lmxlbmd0aCkge1xuICAgICAgY29uc3QgaW5pdGlhbE9mZnNldCA9ICQoJyNyZXNwb25zZV90eXBlcy1jb2RlJykub2Zmc2V0KCkudG9wO1xuXG4gICAgICBjb25zdCBpbml0aWFsU2Nyb2xsUG9zaXRpb24gPSAkKHdpbmRvdykuc2Nyb2xsVG9wKCk7XG5cbiAgICAgIGlmICgkKCcjcmVzcG9uc2VfdHlwZXMtY29kZScpLmlzKCc6Y2hlY2tlZCcpKSB7XG4gICAgICAgICQoJyNyZWZyZXNoX3Rva2VuLXdyYXBwZXIgOmlucHV0LCAjY2xpZW50U2VjcmV0LXdyYXBwZXIgOmlucHV0LCAjdG9rZW5FbmRwb2ludEF1dGhNZXRob2Qtd3JhcHBlciBzZWxlY3QnKS5wcm9wKCdkaXNhYmxlZCcsIGZhbHNlKTtcbiAgICAgICAgJCgnI3JlZnJlc2hfdG9rZW4td3JhcHBlciwgI2NsaWVudFNlY3JldC13cmFwcGVyLCAjdG9rZW5FbmRwb2ludEF1dGhNZXRob2Qtd3JhcHBlcicpLnNsaWRlRG93big1MDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJCgnI3JlZnJlc2hfdG9rZW4td3JhcHBlciwgI2NsaWVudFNlY3JldC13cmFwcGVyLCAjdG9rZW5FbmRwb2ludEF1dGhNZXRob2Qtd3JhcHBlcicpLnNsaWRlVXAoNTAwLCAoKSA9PiB7XG4gICAgICAgICAgJCgnI3JlZnJlc2hfdG9rZW4td3JhcHBlciA6aW5wdXQsICNjbGllbnRTZWNyZXQtd3JhcHBlciA6aW5wdXQsICN0b2tlbkVuZHBvaW50QXV0aE1ldGhvZC13cmFwcGVyIHNlbGVjdCcpLnByb3AoJ2Rpc2FibGVkJywgdHJ1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG5cbiAgICAgIGNvbnN0IG5ld09mZnNldCA9ICQoJyNyZXNwb25zZV90eXBlcy1jb2RlJykub2Zmc2V0KCkudG9wO1xuICAgICAgY29uc3Qgb2Zmc2V0RGlmZmVyZW5jZSA9IG5ld09mZnNldCAtIGluaXRpYWxPZmZzZXQ7XG5cbiAgICAgICQoJ2h0bWwsIGJvZHknKS5hbmltYXRlKHtcbiAgICAgICAgc2Nyb2xsVG9wOiBpbml0aWFsU2Nyb2xsUG9zaXRpb24gKyBvZmZzZXREaWZmZXJlbmNlLFxuICAgICAgfSwgNTAsICdsaW5lYXInKTtcbiAgICB9XG4gIH1cbiAgdXBkYXRlU2VjdGlvbnMoKTtcblxuICAvLyBFdmVudCBsaXN0ZW5lciBmb3IgdGhlIGNoZWNrYm94ZXNcbiAgJCgnI3Jlc3BvbnNlX3R5cGVzLWlkX3Rva2VuLCAjcmVzcG9uc2VfdHlwZXMtdG9rZW4sICNyZXNwb25zZV90eXBlcy1jb2RlJykub24oJ2NoYW5nZScsICgpID0+IHtcbiAgICB1cGRhdGVTZWN0aW9ucygpO1xuICB9KTtcbn0pO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBOU0EgPSBOU0EgfHwge307XG5cbk5TQS5zaWduaW4gPSB7XG4gIGZvcm06ICQoJy5mb3JtLXNpZ25pbicpLFxuICBpbml0OiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5zZXR1cEV2ZW50cygpO1xuICB9LFxuICBzZXR1cEV2ZW50czogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZm9ybS5vbignc3VibWl0JywgdGhpcywgdGhpcy5oYW5kbGVTdWJtaXQpO1xuICB9LFxuICBoYW5kbGVTdWJtaXQ6IGZ1bmN0aW9uIChlKSB7XG5cbiAgICB2YXIgJGZvcm0gPSAkKHRoaXMpO1xuICAgIHZhciAkaW5wdXRzID0gJGZvcm0uZmluZCgnaW5wdXQnKS5ub3QoJzpjaGVja2JveCcpLCBwb3N0RGF0YSA9IHt9LCAkc3VibWl0QnV0dG9ucyA9ICQodGhpcykuZmluZCgnYnV0dG9uOnN1Ym1pdCcpLCAkc3VibWl0QnV0dG9uID0gJHN1Ym1pdEJ1dHRvbnMuZXEoMCk7XG5cbiAgICAkc3VibWl0QnV0dG9ucy5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpO1xuXG4gICAgJHN1Ym1pdEJ1dHRvbi5jc3MoJ21pbi13aWR0aCcsICRzdWJtaXRCdXR0b24ub3V0ZXJXaWR0aCgpICsgJ3B4JylcblxuICAgICRzdWJtaXRCdXR0b24uZmluZCgnLmxvYWRlcicpLnJlbW92ZUNsYXNzKCd2aCcpO1xuXG4gICAgJGlucHV0cy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgcG9zdERhdGFbdGhpcy5uYW1lXSA9ICQodGhpcykudmFsKCk7XG4gICAgfSk7XG5cbiAgICAvLyBIaWRlIGFueSBwYXNzd29yZCBpbnB1dHMgd2UgbWF5IGhhdmUgaW4gdGhlIGZvcm1cbiAgICB2YXIgJHBhc3N3b3JkSW5wdXRzID0gJCgnLnBhc3N3b3JkLWlucHV0Jyk7XG4gICAgJHBhc3N3b3JkSW5wdXRzLmVhY2goZnVuY3Rpb24gKGkpIHtcbiAgICAgIC8vIEhpZGUgcGFzc3dvcmRcbiAgICAgICQodGhpcykuYXR0cihcInR5cGVcIiwgXCJwYXNzd29yZFwiKTtcbiAgICAgIC8vIFVwZGF0ZSB0ZXh0IGluIHNob3cvaGlkZSBidXR0b25cbiAgICAgICQodGhpcykuc2libGluZ3MoJy5zaG93LXBhc3N3b3JkJykuaHRtbCgnU2hvdycpO1xuICAgIH0pO1xuXG4gICAgJC5hamF4KHtcbiAgICAgIHR5cGU6ICdQT1NUJyxcbiAgICAgIGRhdGE6IHBvc3REYXRhLFxuICAgICAgdXJsOiAkZm9ybS5hdHRyKCdhY3Rpb24nKSxcbiAgICAgIGNvbnRleHQ6IGUuZGF0YSxcbiAgICAgIGRhdGFUeXBlOiAnanNvbicsXG4gICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICBpZiAoZGF0YS5yZWRpcmVjdCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gZGF0YS51cmk7XG4gICAgICAgICAgJCgndGl0bGUnKS5odG1sKCdEZkUgU2lnbi1pbicpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChkYXRhLmlzRmFpbGVkTG9naW4pIHtcbiAgICAgICAgICAgIHRoaXMucmVzZXRWYWxpZGF0aW9uKCRmb3JtKTtcbiAgICAgICAgICAgICQoJ3RpdGxlJykuaHRtbCgnRXJyb3I6IERmRSBTaWduLWluJyk7XG4gICAgICAgICAgICBpZiAoZGF0YS5kZWxheVRpbGwpIHtcbiAgICAgICAgICAgICAgdGhpcy5zaG93VmFsaWRhdGlvbk1lc3NhZ2UoZGF0YS52YWxpZGF0aW9uTWVzc2FnZXMsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhpcy5zaG93VmFsaWRhdGlvbk1lc3NhZ2UoZGF0YS52YWxpZGF0aW9uTWVzc2FnZXMpO1xuICAgICAgICAgICAgICAkc3VibWl0QnV0dG9ucy5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zaG93SW5saW5lVmFsaWRhdGlvbihkYXRhLnZhbGlkYXRpb25NZXNzYWdlcyk7XG4gICAgICAgICAgICAkc3VibWl0QnV0dG9uLmZpbmQoJy5sb2FkZXInKS5hZGRDbGFzcygndmgnKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5idWlsZEZvcm1BbmRTdWJtaXQoZGF0YSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZXJyb3I6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLnJlc2V0VmFsaWRhdGlvbigkZm9ybSk7XG4gICAgICAgIHRoaXMuc2hvd1ZhbGlkYXRpb25NZXNzYWdlKCk7XG4gICAgICAgICRzdWJtaXRCdXR0b25zLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJyk7XG4gICAgICAgICRzdWJtaXRCdXR0b24uZmluZCgnLmxvYWRlcicpLmFkZENsYXNzKCd2aCcpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgfSxcbiAgcmVzZXRWYWxpZGF0aW9uOiBmdW5jdGlvbiAoJGZvcm0pIHtcblxuICAgICQoJy5nb3Z1ay1lcnJvci1zdW1tYXJ5JykucmVtb3ZlKCk7XG5cbiAgICB2YXIgJGZvcm1Hcm91cHMgPSAkZm9ybS5maW5kKCcuZ292dWstZm9ybS1ncm91cCcpO1xuXG4gICAgJGZvcm1Hcm91cHMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJGZpZWxkID0gJCh0aGlzKS5maW5kKCdpbnB1dCcpLmVxKDApO1xuICAgICAgaWYgKCQodGhpcykuaGFzQ2xhc3MoJ2dvdnVrLWZvcm0tZ3JvdXAtLWVycm9yJykpIHtcbiAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcygnZ292dWstZm9ybS1ncm91cC0tZXJyb3InKTtcbiAgICAgICAgJCh0aGlzKS5maW5kKCdzcGFuLmdvdnVrLWVycm9yLW1lc3NhZ2UnKS5yZW1vdmUoKTtcbiAgICAgICAgJGZpZWxkLnJlbW92ZUF0dHIoJ2FyaWEtZGVzY3JpYmVkYnknKS5yZW1vdmVBdHRyKCdhcmlhLWludmFsaWQnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcblxuICBzaG93VmFsaWRhdGlvbk1lc3NhZ2U6IGZ1bmN0aW9uIChtZXNzYWdlcywgc2hvd1JlZnJlc2hMaW5rKSB7XG5cbiAgICB2YXIgJGRpdiA9ICQoJzxkaXYgLz4nKS5hdHRyKCdjbGFzcycsICdnb3Z1ay1lcnJvci1zdW1tYXJ5IGdvdnVrLSEtbWFyZ2luLXRvcC02JykuYXR0cigncm9sZScsICdhbGVydCcpLmF0dHIoJ3RhYmluZGV4JywgJy0xJykuYXR0cignYXJpYS1sYWJlbGxlZGJ5JywgJ2Vycm9yLXN1bW1hcnktdGl0bGUnKTtcbiAgICB2YXIgJGgyID0gJCgnPGgyIC8+JykuYXR0cignY2xhc3MnLCAnZ292dWstZXJyb3Itc3VtbWFyeV9fdGl0bGUnKS5hdHRyKCdpZCcsICdlcnJvci1zdW1tYXJ5Jyk7XG4gICAgdmFyICR1bENvbnRhaW5lciA9ICQoJzxkaXYgLz4nKS5hdHRyKCdjbGFzcycsICdnb3Z1ay1lcnJvci1zdW1tYXJ5X19ib2R5Jyk7XG4gICAgdmFyICR1bCA9ICQoJzx1bCAvPicpLmF0dHIoJ2NsYXNzJywgJ2dvdnVrLWxpc3QgZ292dWstZXJyb3Itc3VtbWFyeV9fbGlzdCcpO1xuXG4gICAgaWYgKG1lc3NhZ2VzKSB7XG4gICAgICAkaDIudGV4dCgnVGhlcmUgaXMgYSBwcm9ibGVtJyk7XG4gICAgICAkLmVhY2gobWVzc2FnZXMsIGZ1bmN0aW9uIChpbmRleCwgdmFsdWUpIHtcbiAgICAgICAgaWYgKGluZGV4ID09PSAnbG9naW5FcnJvcicpIHtcbiAgICAgICAgICBpbmRleCA9ICd1c2VybmFtZSc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyICRhID0gJCgnPGEgLz4nKS5hdHRyKCdjbGFzcycsICdnb3Z1ay1saW5rJykuYXR0cignaHJlZicsICcjJyArIGluZGV4KS50ZXh0KHZhbHVlKTtcbiAgICAgICAgdmFyICRsaSA9ICQoJzxsaSAvPicpLmFwcGVuZCgkYSk7XG4gICAgICAgICR1bC5hcHBlbmQoJGxpKTtcbiAgICAgIH0pO1xuICAgICAgaWYgKHNob3dSZWZyZXNoTGluaykge1xuICAgICAgICB2YXIgJGEgPSAkKCc8YSAvPicpLmF0dHIoJ2NsYXNzJywgJ2dvdnVrLWxpbmstYm9sZCcpLmF0dHIoJ2hyZWYnLCAnJykuYXR0cignb25jbGljaycsICd3aW5kb3cubG9jYXRpb24ucmVsb2FkKCknKS50ZXh0KCdSZWZyZXNoIHRoaXMgcGFnZScpLmNzcygnY29sb3InLCAnIzFkNzBiOCcpO1xuICAgICAgICB2YXIgJGxpID0gJCgnPGxpIC8+JykuYXBwZW5kKCRhKTtcbiAgICAgICAgJHVsLmFwcGVuZCgkbGkpO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgICRoMi50ZXh0KCdUaGVyZSBoYXMgYmVlbiBhbiBlcnJvcicpO1xuICAgICAgdmFyICRsaSA9ICQoJzxsaSAvPicpLmh0bWwoJ1BsZWFzZSB0cnkgYWdhaW4gbGF0ZXIuIElmIHRoZSBwcm9ibGVtIGNvbnRpbnVlcywgZm9sbG93IHRoZSBsaW5rIHRvIDxhIGhyZWY9XCJodHRwczovL2hlbHAuc2lnbmluLmVkdWNhdGlvbi5nb3YudWsvY29udGFjdC9mb3JtXCI+c3VibWl0IGEgc3VwcG9ydCByZXF1ZXN0PC9hPicpO1xuICAgICAgJHVsLmFwcGVuZCgkbGkpO1xuICAgIH1cbiAgICAkZGl2LmFwcGVuZCgkaDIpLmFwcGVuZCgkdWxDb250YWluZXIuYXBwZW5kKCR1bCkpO1xuICAgICQoJ21haW4nKS5wcmVwZW5kKCRkaXYpO1xuXG4gICAgJCgnaHRtbCwgYm9keScpLmFuaW1hdGUoe1xuICAgICAgc2Nyb2xsVG9wOiAkZGl2Lm9mZnNldCgpLnRvcCAtIDE1XG4gICAgfSwgMzAwKTtcblxuICB9LFxuICBzaG93SW5saW5lVmFsaWRhdGlvbjogZnVuY3Rpb24obWVzc2FnZXMpIHtcblxuICAgICQuZWFjaChtZXNzYWdlcywgZnVuY3Rpb24oIGluZGV4LCB2YWx1ZSApIHtcbiAgICAgIHZhciAkZmllbGQgPSAkKCdpbnB1dFtuYW1lPScgKyBpbmRleCArICddJyksXG4gICAgICAgICRwYXJlbnQgPSAkZmllbGQucGFyZW50KCk7XG5cbiAgICAgIHZhciAkbGFiZWwgPSAkcGFyZW50LmZpbmQoJ2xhYmVsJykuZmlyc3QoKTtcblxuICAgICAgaWYgKCEkcGFyZW50Lmhhc0NsYXNzKCdnb3Z1ay1mb3JtLWdyb3VwLS1lcnJvcicpKSB7XG5cbiAgICAgICAgdmFyIGVycm9yTWVzc2FnZSA9ICQoJzxzcGFuIGNsYXNzPVwiZ292dWstYm9keVwiPicpXG4gICAgICAgICAgLmh0bWwoJzxzcGFuIGNsYXNzPVwiZ292dWstdmlzdWFsbHktaGlkZGVuXCI+RXJyb3I6PC9zcGFuPicgKyB2YWx1ZSlcbiAgICAgICAgICAucHJvcCgnY2xhc3MnLCAnZ292dWstZXJyb3ItbWVzc2FnZScpXG4gICAgICAgICAgLnByb3AoJ2lkJywgJ3ZhbGlkYXRpb24tJyArIGluZGV4KTtcbiAgICAgIH1cblxuICAgICAgJGxhYmVsLmFmdGVyKGVycm9yTWVzc2FnZSk7XG4gICAgICAkcGFyZW50LmFkZENsYXNzKCdnb3Z1ay1mb3JtLWdyb3VwLS1lcnJvcicpO1xuICAgICAgJGZpZWxkLmF0dHIoe1xuICAgICAgICAnYXJpYS1kZXNjcmliZWRieScgOiAndmFsaWRhdGlvbi0nICsgaW5kZXgsXG4gICAgICAgICdhcmlhLWludmFsaWQnOiAndHJ1ZSdcbiAgICAgIH0pO1xuXG4gICAgfSk7XG5cbiAgfSxcbiAgYnVpbGRGb3JtQW5kU3VibWl0OiBmdW5jdGlvbiAoZGF0YSkge1xuXG4gICAgdmFyICRmb3JtID0gJCgnPGZvcm0gLz4nKS5hdHRyKHtcbiAgICAgIG1ldGhvZDogJ3Bvc3QnLFxuICAgICAgYWN0aW9uOiBkYXRhLmRlc3RpbmF0aW9uLFxuICAgICAgaWQ6ICdkZmVzaWduaW5mb3JtJ1xuICAgIH0pO1xuXG4gICAgJC5lYWNoKGRhdGEucG9zdGJhY2tEYXRhLCBmdW5jdGlvbiggaW5kZXgsIHZhbHVlICkge1xuICAgICAgdmFyICRmaWVsZCA9ICQoJzxpbnB1dCAvPicpLmF0dHIoe1xuICAgICAgICB0eXBlOiAnaGlkZGVuJyxcbiAgICAgICAgbmFtZTogaW5kZXgsXG4gICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgfSk7XG4gICAgICAkZm9ybS5hcHBlbmQoJGZpZWxkKTtcbiAgICB9KTtcblxuICAgICQoJyNkZmVzaWduaW5mb3JtJykucmVtb3ZlKCk7XG4gICAgJCgnYm9keScpLmFwcGVuZCgkZm9ybSk7XG4gICAgJGZvcm0uc3VibWl0KCk7XG4gIH0sXG59O1xuXG5pZiAoJCgnLmZvcm0tc2lnbmluJykubGVuZ3RoID4gMCkge1xuICBOU0Euc2lnbmluLmluaXQoKTtcbn1cblxuZnVuY3Rpb24gZ2V0UGFyYW1ldGVyQnlOYW1lKG5hbWUsIHVybCkge1xuICBpZiAoIXVybCkgdXJsID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gIG5hbWUgPSBuYW1lLnJlcGxhY2UoL1tcXFtcXF1dL2csIFwiXFxcXCQmXCIpO1xuICB2YXIgcmVnZXggPSBuZXcgUmVnRXhwKFwiWz8mXVwiICsgbmFtZSArIFwiKD0oW14mI10qKXwmfCN8JClcIiksXG4gICAgcmVzdWx0cyA9IHJlZ2V4LmV4ZWModXJsKTtcbiAgaWYgKCFyZXN1bHRzKSByZXR1cm4gbnVsbDtcbiAgaWYgKCFyZXN1bHRzWzJdKSByZXR1cm4gJyc7XG4gIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQocmVzdWx0c1syXS5yZXBsYWNlKC9cXCsvZywgXCIgXCIpKTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBzb3J0VGFibGUobikge1xuICB2YXIgdGFibGUsIHJvd3MsIHN3aXRjaGluZywgaSwgeCwgeSwgc2hvdWxkU3dpdGNoLCBkaXJlY3Rpb24sIHN3aXRjaGNvdW50ID0gMDtcbiAgdGFibGUgPSAkKCd0YWJsZS5zb3J0YWJsZScpO1xuICBzd2l0Y2hpbmcgPSB0cnVlO1xuICBkaXJlY3Rpb24gPSAnYSc7XG5cbiAgd2hpbGUgKHN3aXRjaGluZykge1xuXG4gICAgc3dpdGNoaW5nID0gZmFsc2U7XG4gICAgcm93cyA9IHRhYmxlLmZpbmQoJ3RyJyk7XG5cbiAgICBmb3IgKGkgPSAxOyBpIDwgKHJvd3MubGVuZ3RoIC0gMSk7IGkrKykge1xuXG4gICAgICBzaG91bGRTd2l0Y2ggPSBmYWxzZTtcblxuICAgICAgeCA9IHJvd3NbaV0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ1REJylbbl07XG4gICAgICB5ID0gcm93c1tpICsgMV0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ1REJylbbl07XG5cbiAgICAgIGlmIChkaXJlY3Rpb24gPT09ICdhJykge1xuICAgICAgICBpZiAoeC5pbm5lckhUTUwudG9Mb3dlckNhc2UoKSA+IHkuaW5uZXJIVE1MLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICBzaG91bGRTd2l0Y2ggPSB0cnVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gJ2QnKSB7XG4gICAgICAgIGlmICh4LmlubmVySFRNTC50b0xvd2VyQ2FzZSgpIDwgeS5pbm5lckhUTUwudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgIHNob3VsZFN3aXRjaCA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc2hvdWxkU3dpdGNoKSB7XG5cbiAgICAgIHJvd3NbaV0ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUocm93c1tpICsgMV0sIHJvd3NbaV0pO1xuICAgICAgc3dpdGNoaW5nID0gdHJ1ZTtcblxuICAgICAgc3dpdGNoY291bnQgKys7XG5cbiAgICB9IGVsc2Uge1xuXG4gICAgICBpZiAoc3dpdGNoY291bnQgPT09IDAgJiYgZGlyZWN0aW9uID09PSAnYScpIHtcbiAgICAgICAgZGlyZWN0aW9uID0gJ2QnO1xuICAgICAgICBzd2l0Y2hpbmcgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgfVxuICB9XG4gIHJldHVybiBkaXJlY3Rpb247XG59XG5cbiQoZnVuY3Rpb24gKCkge1xuXG4gICQoJ3RhYmxlLnNvcnRhYmxlIHRoZWFkIHRoJykub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuXG4gICAgdmFyIGhlYWRpbmdDZWxscyA9ICQoJ3RhYmxlLnNvcnRhYmxlIHRoZWFkIHRyIHRoJyk7XG5cbiAgICBoZWFkaW5nQ2VsbHMucmVtb3ZlQ2xhc3MoJ3NvcnRlZCcpLnJlbW92ZUNsYXNzKCdkaXItYScpLnJlbW92ZUNsYXNzKCdkaXItZCcpO1xuXG4gICAgdmFyIGluZGV4ID0gaGVhZGluZ0NlbGxzLmluZGV4KCQodGhpcykpO1xuXG4gICAgdmFyIGRpcmVjdGlvbiA9IHNvcnRUYWJsZShpbmRleCk7XG5cbiAgICAkKHRoaXMpLmFkZENsYXNzKCdzb3J0ZWQgZGlyLScgKyBkaXJlY3Rpb24pO1xuXG4gIH0pO1xuXG59KTtcbiIsIjsoZnVuY3Rpb24gKGdsb2JhbCkge1xuICAndXNlIHN0cmljdCdcblxuICB2YXIgJCA9IGdsb2JhbC5qUXVlcnlcbiAgdmFyIEdPVlVLID0gZ2xvYmFsLkdPVlVLIHx8IHt9XG5cbiAgZnVuY3Rpb24gU2hvd0hpZGVDb250ZW50ICgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXNcblxuICAgIC8vIFJhZGlvIGFuZCBDaGVja2JveCBzZWxlY3RvcnNcbiAgICB2YXIgc2VsZWN0b3JzID0ge1xuICAgICAgbmFtZXNwYWNlOiAnU2hvd0hpZGVDb250ZW50JyxcbiAgICAgIHJhZGlvOiAnW2RhdGEtdGFyZ2V0XSA+IGlucHV0W3R5cGU9XCJyYWRpb1wiXScsXG4gICAgICBjaGVja2JveDogJ1tkYXRhLXRhcmdldF0gPiBpbnB1dFt0eXBlPVwiY2hlY2tib3hcIl0nLFxuICAgICAgbGluazogJ2EuanMtdG9nZ2xlLWNvbnRlbnQnXG4gICAgfVxuXG4gICAgLy8gRXNjYXBlIG5hbWUgYXR0cmlidXRlIGZvciB1c2UgaW4gRE9NIHNlbGVjdG9yXG4gICAgZnVuY3Rpb24gZXNjYXBlRWxlbWVudE5hbWUgKHN0cikge1xuICAgICAgdmFyIHJlc3VsdCA9IHN0ci5yZXBsYWNlKCdbJywgJ1xcXFxbJykucmVwbGFjZSgnXScsICdcXFxcXScpXG4gICAgICByZXR1cm4gcmVzdWx0XG4gICAgfVxuXG4gICAgLy8gQWRkcyBBUklBIGF0dHJpYnV0ZXMgdG8gY29udHJvbCArIGFzc29jaWF0ZWQgY29udGVudFxuICAgIGZ1bmN0aW9uIGluaXRUb2dnbGVkQ29udGVudCAoKSB7XG4gICAgICB2YXIgJGNvbnRyb2wgPSAkKHRoaXMpXG4gICAgICB2YXIgJGNvbnRlbnQgPSBnZXRUb2dnbGVkQ29udGVudCgkY29udHJvbClcblxuICAgICAgLy8gU2V0IGFyaWEtY29udHJvbHMgYW5kIGRlZmF1bHRzXG4gICAgICBpZiAoJGNvbnRlbnQubGVuZ3RoKSB7XG4gICAgICAgICRjb250cm9sLmF0dHIoJ2FyaWEtY29udHJvbHMnLCAkY29udGVudC5hdHRyKCdpZCcpKVxuICAgICAgICAkY29udHJvbC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgJ2ZhbHNlJylcbiAgICAgICAgJGNvbnRlbnQuYXR0cignYXJpYS1oaWRkZW4nLCAndHJ1ZScpXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIHRvZ2dsZWQgY29udGVudCBmb3IgY29udHJvbFxuICAgIGZ1bmN0aW9uIGdldFRvZ2dsZWRDb250ZW50ICgkY29udHJvbCkge1xuICAgICAgdmFyIGlkID0gJGNvbnRyb2wuYXR0cignYXJpYS1jb250cm9scycpXG5cbiAgICAgIC8vIEFSSUEgYXR0cmlidXRlcyBhcmVuJ3Qgc2V0IGJlZm9yZSBpbml0XG4gICAgICBpZiAoIWlkKSB7XG4gICAgICAgIGlkID0gJGNvbnRyb2wuY2xvc2VzdCgnW2RhdGEtdGFyZ2V0XScpLmRhdGEoJ3RhcmdldCcpXG4gICAgICB9XG5cbiAgICAgIC8vIEZpbmQgc2hvdy9oaWRlIGNvbnRlbnQgYnkgaWRcbiAgICAgIHJldHVybiAkKCcjJyArIGlkKVxuICAgIH1cblxuICAgIC8vIFNob3cgdG9nZ2xlZCBjb250ZW50IGZvciBjb250cm9sXG4gICAgZnVuY3Rpb24gc2hvd1RvZ2dsZWRDb250ZW50ICgkY29udHJvbCwgJGNvbnRlbnQpIHtcbiAgICAgIC8vIFNob3cgY29udGVudFxuICAgICAgaWYgKCRjb250ZW50Lmhhc0NsYXNzKCdqcy1oaWRkZW4nKSkge1xuICAgICAgICAkY29udGVudC5yZW1vdmVDbGFzcygnanMtaGlkZGVuJylcbiAgICAgICAgJGNvbnRlbnQuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKVxuXG4gICAgICAgIC8vIElmIHRoZSBjb250cm9sbGluZyBpbnB1dCwgdXBkYXRlIGFyaWEtZXhwYW5kZWRcbiAgICAgICAgaWYgKCRjb250cm9sLmF0dHIoJ2FyaWEtY29udHJvbHMnKSkge1xuICAgICAgICAgICRjb250cm9sLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAndHJ1ZScpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBIaWRlIHRvZ2dsZWQgY29udGVudCBmb3IgY29udHJvbFxuICAgIGZ1bmN0aW9uIGhpZGVUb2dnbGVkQ29udGVudCAoJGNvbnRyb2wsICRjb250ZW50KSB7XG4gICAgICAkY29udGVudCA9ICRjb250ZW50IHx8IGdldFRvZ2dsZWRDb250ZW50KCRjb250cm9sKVxuXG4gICAgICAvLyBIaWRlIGNvbnRlbnRcbiAgICAgIGlmICghJGNvbnRlbnQuaGFzQ2xhc3MoJ2pzLWhpZGRlbicpKSB7XG4gICAgICAgICRjb250ZW50LmFkZENsYXNzKCdqcy1oaWRkZW4nKVxuICAgICAgICAkY29udGVudC5hdHRyKCdhcmlhLWhpZGRlbicsICd0cnVlJylcblxuICAgICAgICAvLyBJZiB0aGUgY29udHJvbGxpbmcgaW5wdXQsIHVwZGF0ZSBhcmlhLWV4cGFuZGVkXG4gICAgICAgIGlmICgkY29udHJvbC5hdHRyKCdhcmlhLWNvbnRyb2xzJykpIHtcbiAgICAgICAgICAkY29udHJvbC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgJ2ZhbHNlJylcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEhhbmRsZSByYWRpbyBzaG93L2hpZGVcbiAgICBmdW5jdGlvbiBoYW5kbGVSYWRpb0NvbnRlbnQgKCRjb250cm9sLCAkY29udGVudCkge1xuICAgICAgLy8gQWxsIHJhZGlvcyBpbiB0aGlzIGdyb3VwIHdoaWNoIGNvbnRyb2wgY29udGVudFxuICAgICAgdmFyIHNlbGVjdG9yID0gc2VsZWN0b3JzLnJhZGlvICsgJ1tuYW1lPScgKyBlc2NhcGVFbGVtZW50TmFtZSgkY29udHJvbC5hdHRyKCduYW1lJykpICsgJ11bYXJpYS1jb250cm9sc10nXG4gICAgICB2YXIgJGZvcm0gPSAkY29udHJvbC5jbG9zZXN0KCdmb3JtJylcbiAgICAgIHZhciAkcmFkaW9zID0gJGZvcm0ubGVuZ3RoID8gJGZvcm0uZmluZChzZWxlY3RvcikgOiAkKHNlbGVjdG9yKVxuXG4gICAgICAvLyBIaWRlIGNvbnRlbnQgZm9yIHJhZGlvcyBpbiBncm91cFxuICAgICAgJHJhZGlvcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaGlkZVRvZ2dsZWRDb250ZW50KCQodGhpcykpXG4gICAgICB9KVxuXG4gICAgICAvLyBTZWxlY3QgY29udGVudCBmb3IgdGhpcyBjb250cm9sXG4gICAgICBpZiAoJGNvbnRyb2wuaXMoJ1thcmlhLWNvbnRyb2xzXScpKSB7XG4gICAgICAgIHNob3dUb2dnbGVkQ29udGVudCgkY29udHJvbCwgJGNvbnRlbnQpXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIGNoZWNrYm94IHNob3cvaGlkZVxuICAgIGZ1bmN0aW9uIGhhbmRsZUNoZWNrYm94Q29udGVudCAoJGNvbnRyb2wsICRjb250ZW50KSB7XG4gICAgICAvLyBTaG93IGNoZWNrYm94IGNvbnRlbnRcbiAgICAgIGlmICgkY29udHJvbC5pcygnOmNoZWNrZWQnKSkge1xuICAgICAgICBzaG93VG9nZ2xlZENvbnRlbnQoJGNvbnRyb2wsICRjb250ZW50KVxuICAgICAgfSBlbHNlIHsgLy8gSGlkZSBjaGVja2JveCBjb250ZW50XG4gICAgICAgIGhpZGVUb2dnbGVkQ29udGVudCgkY29udHJvbCwgJGNvbnRlbnQpXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIGNoZWNrYm94IHNob3cvaGlkZVxuICAgIGZ1bmN0aW9uIGhhbmRsZUxpbmtDb250ZW50ICgkY29udHJvbCwgJGNvbnRlbnQsICRldmVudCkge1xuICAgICAgaWYgKCRjb250ZW50Lmhhc0NsYXNzKCdqcy1oaWRkZW4nKSkge1xuICAgICAgICBzaG93VG9nZ2xlZENvbnRlbnQoJGNvbnRyb2wsICRjb250ZW50KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaGlkZVRvZ2dsZWRDb250ZW50KCRjb250cm9sLCAkY29udGVudClcbiAgICAgIH1cbiAgICAgICRldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgfVxuXG4gICAgLy8gU2V0IHVwIGV2ZW50IGhhbmRsZXJzIGV0Y1xuICAgIGZ1bmN0aW9uIGluaXQgKCRjb250YWluZXIsIGVsZW1lbnRTZWxlY3RvciwgZXZlbnRTZWxlY3RvcnMsIGhhbmRsZXIpIHtcbiAgICAgICRjb250YWluZXIgPSAkY29udGFpbmVyIHx8ICQoZG9jdW1lbnQuYm9keSlcblxuICAgICAgLy8gSGFuZGxlIGNvbnRyb2wgY2xpY2tzXG4gICAgICBmdW5jdGlvbiBkZWZlcnJlZCAoZXZlbnQpIHtcbiAgICAgICAgdmFyICRjb250cm9sID0gJCh0aGlzKVxuICAgICAgICBoYW5kbGVyKCRjb250cm9sLCBnZXRUb2dnbGVkQ29udGVudCgkY29udHJvbCksIGV2ZW50KVxuICAgICAgfVxuXG4gICAgICAvLyBQcmVwYXJlIEFSSUEgYXR0cmlidXRlc1xuICAgICAgdmFyICRjb250cm9scyA9ICQoZWxlbWVudFNlbGVjdG9yKVxuICAgICAgJGNvbnRyb2xzLmVhY2goaW5pdFRvZ2dsZWRDb250ZW50KVxuXG4gICAgICAvLyBIYW5kbGUgZXZlbnRzXG4gICAgICAkLmVhY2goZXZlbnRTZWxlY3RvcnMsIGZ1bmN0aW9uIChpZHgsIGV2ZW50U2VsZWN0b3IpIHtcbiAgICAgICAgJGNvbnRhaW5lci5vbignY2xpY2suJyArIHNlbGVjdG9ycy5uYW1lc3BhY2UsIGV2ZW50U2VsZWN0b3IsIGRlZmVycmVkKVxuICAgICAgfSlcblxuICAgICAgLy8gQW55IGFscmVhZHkgOmNoZWNrZWQgb24gaW5pdD9cbiAgICAgIGlmICgkY29udHJvbHMuaXMoJzpjaGVja2VkJykpIHtcbiAgICAgICAgJGNvbnRyb2xzLmZpbHRlcignOmNoZWNrZWQnKS5lYWNoKGRlZmVycmVkKVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEdldCBldmVudCBzZWxlY3RvcnMgZm9yIGFsbCByYWRpbyBncm91cHNcbiAgICBmdW5jdGlvbiBnZXRFdmVudFNlbGVjdG9yc0ZvclJhZGlvR3JvdXBzICgpIHtcbiAgICAgIHZhciByYWRpb0dyb3VwcyA9IFtdXG5cbiAgICAgIC8vIEJ1aWxkIGFuIGFycmF5IG9mIHJhZGlvIGdyb3VwIHNlbGVjdG9yc1xuICAgICAgcmV0dXJuICQoc2VsZWN0b3JzLnJhZGlvKS5tYXAoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZ3JvdXBOYW1lID0gJCh0aGlzKS5hdHRyKCduYW1lJylcblxuICAgICAgICBpZiAoJC5pbkFycmF5KGdyb3VwTmFtZSwgcmFkaW9Hcm91cHMpID09PSAtMSkge1xuICAgICAgICAgIHJhZGlvR3JvdXBzLnB1c2goZ3JvdXBOYW1lKVxuICAgICAgICAgIHJldHVybiAnaW5wdXRbdHlwZT1cInJhZGlvXCJdW25hbWU9XCInICsgJCh0aGlzKS5hdHRyKCduYW1lJykgKyAnXCJdJ1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsXG4gICAgICB9KVxuICAgIH1cblxuICAgIC8vIFNldCB1cCByYWRpbyBzaG93L2hpZGUgY29udGVudCBmb3IgY29udGFpbmVyXG4gICAgc2VsZi5zaG93SGlkZVJhZGlvVG9nZ2xlZENvbnRlbnQgPSBmdW5jdGlvbiAoJGNvbnRhaW5lcikge1xuICAgICAgaW5pdCgkY29udGFpbmVyLCBzZWxlY3RvcnMucmFkaW8sIGdldEV2ZW50U2VsZWN0b3JzRm9yUmFkaW9Hcm91cHMoKSwgaGFuZGxlUmFkaW9Db250ZW50KVxuICAgIH1cblxuICAgIC8vIFNldCB1cCBjaGVja2JveCBzaG93L2hpZGUgY29udGVudCBmb3IgY29udGFpbmVyXG4gICAgc2VsZi5zaG93SGlkZUNoZWNrYm94VG9nZ2xlZENvbnRlbnQgPSBmdW5jdGlvbiAoJGNvbnRhaW5lcikge1xuICAgICAgaW5pdCgkY29udGFpbmVyLCBzZWxlY3RvcnMuY2hlY2tib3gsIFtzZWxlY3RvcnMuY2hlY2tib3hdLCBoYW5kbGVDaGVja2JveENvbnRlbnQpXG4gICAgfVxuXG4gICAgLy8gU2V0IHVwIGxpbmtzIHNob3cvaGlkZSBjb250ZW50IGZvciBjb250YWluZXJcbiAgICBzZWxmLnNob3dIaWRlTGlua1RvZ2dsZWRDb250ZW50ID0gZnVuY3Rpb24gKCRjb250YWluZXIpIHtcbiAgICAgIGluaXQoJGNvbnRhaW5lciwgc2VsZWN0b3JzLmxpbmssIFtzZWxlY3RvcnMubGlua10sIGhhbmRsZUxpbmtDb250ZW50KVxuICAgIH1cblxuICAgIC8vIFJlbW92ZSBldmVudCBoYW5kbGVyc1xuICAgIHNlbGYuZGVzdHJveSA9IGZ1bmN0aW9uICgkY29udGFpbmVyKSB7XG4gICAgICAkY29udGFpbmVyID0gJGNvbnRhaW5lciB8fCAkKGRvY3VtZW50LmJvZHkpXG4gICAgICAkY29udGFpbmVyLm9mZignLicgKyBzZWxlY3RvcnMubmFtZXNwYWNlKVxuICAgIH1cbiAgfVxuXG4gIFNob3dIaWRlQ29udGVudC5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgkY29udGFpbmVyKSB7XG4gICAgdGhpcy5zaG93SGlkZVJhZGlvVG9nZ2xlZENvbnRlbnQoJGNvbnRhaW5lcilcbiAgICB0aGlzLnNob3dIaWRlQ2hlY2tib3hUb2dnbGVkQ29udGVudCgkY29udGFpbmVyKVxuICAgIHRoaXMuc2hvd0hpZGVMaW5rVG9nZ2xlZENvbnRlbnQoJGNvbnRhaW5lcilcbiAgfVxuXG4gIEdPVlVLLlNob3dIaWRlQ29udGVudCA9IFNob3dIaWRlQ29udGVudFxuICBnbG9iYWwuR09WVUsgPSBHT1ZVS1xufSkod2luZG93KVxuIiwidmFyIHRvZ2dsZVRpcHMgPSAkKCcudG9nZ2xlLWhlbHAnKTtcblxudG9nZ2xlVGlwcy5lYWNoKGZ1bmN0aW9uICgpIHtcblxuICB2YXIgJHRoYXQsXG4gICAgbGl2ZVJlZ2lvbixcbiAgICBjb250YWluZXIsXG4gICAgdG9nZ2xlVGlwO1xuXG4gICR0aGF0ID0gJCh0aGlzKTtcblxuICBjb250YWluZXIgPSAkKCc8c3BhbiAvPicpLmF0dHIoJ2NsYXNzJywgJ3RvZ2dsZXRpcCcpO1xuXG4gIHRvZ2dsZVRpcCA9ICQoJzxidXR0b24gLz4nKVxuICAgIC5hdHRyKCd0eXBlJywgJ2J1dHRvbicpXG4gICAgLmF0dHIoJ2FyaWEtbGFiZWwnLCAnSGVscCcpXG4gICAgLmF0dHIoJ2RhdGEtdG9nZ2xldGlwLWNvbnRlbnQnLCAkdGhhdC5odG1sKCkpXG4gICAgLnRleHQoJz8nKVxuICAgIC5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgbWVzc2FnZSA9ICQodGhpcykuZGF0YSgndG9nZ2xldGlwLWNvbnRlbnQnKTtcbiAgICAgIHZhciBsaXZlUmVnaW9uID0gJCh0aGlzKS5uZXh0KCk7XG4gICAgICB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxpdmVSZWdpb24uaHRtbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuICQoJzxzcGFuIC8+JylcbiAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuICR0aGF0Lmh0bWwoKS5sZW5ndGggPiA1MCA/ICdidWJibGUgbG9uZycgOiAnYnViYmxlJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC50ZXh0KG1lc3NhZ2UpXG4gICAgICAgIH0pXG4gICAgICB9LCAxMDApO1xuICAgIH0pXG4gICAgLm9uKCdrZXlkb3duJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmICgoZS5rZXlDb2RlIHx8IGUud2hpY2gpID09PSAyNylcbiAgICAgICAgbGl2ZVJlZ2lvbi5odG1sKCcnKTtcbiAgICB9KTtcblxuICBsaXZlUmVnaW9uID0gJCgnPHNwYW4gLz4nKVxuICAgIC5hdHRyKCdyb2xlJywgJ3N0YXR1cycpO1xuXG4gIGNvbnRhaW5lci5hcHBlbmQodG9nZ2xlVGlwLCBsaXZlUmVnaW9uKTtcblxuICAkdGhhdC5iZWZvcmUoY29udGFpbmVyKS5yZW1vdmUoKTtcblxuICAkKGRvY3VtZW50KS5vbignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuICAgIGlmICgkdGhhdFswXSAhPT0gJChlLnRhcmdldCkpIHtcbiAgICAgIGxpdmVSZWdpb24uaHRtbCgnJyk7XG4gICAgfVxuICB9KTtcblxufSk7XG4iLCJmdW5jdGlvbiB2YWxpZGF0ZVBhc3N3b3JkKCkge1xuICB2YXIgaWQgPSAgJCh0aGlzKS5hdHRyKFwiaWRcIilcbiAgLypBcnJheSBvZiBydWxlcyBhbmQgdGhlIGluZm9ybWF0aW9uIHRhcmdldCovXG4gIHZhciBydWxlcyA9IFt7XG4gICAgICBQYXR0ZXJuOiAvKC4qW0EtWl0pezJ9LyxcbiAgICAgIFRhcmdldDogYHVwcGVyLWNhc2UtJHtpZH1gXG4gICAgfSxcbiAgICB7XG4gICAgICBQYXR0ZXJuOiAvKC4qW2Etel0pezJ9LyxcbiAgICAgIFRhcmdldDogYGxvd2VyLWNhc2UtJHtpZH1gXG4gICAgfSxcbiAgICB7XG4gICAgICBQYXR0ZXJuOiAvKC4qXFxkKXsyfS8sXG4gICAgICBUYXJnZXQ6IGBudW1iZXJzLSR7aWR9YFxuICAgIH0sXG4gIF07XG4gIHZhciBwYXNzd29yZCA9ICQodGhpcykudmFsKCk7XG4gICQoYCNsZW5ndGgtJHtpZH1gKS5yZW1vdmVDbGFzcyhwYXNzd29yZC5sZW5ndGggPiA3ID8gXCJpY29uLXJlbW92ZVwiIDogXCJpY29uLW9rXCIpO1xuICAkKGAjbGVuZ3RoLSR7aWR9YCkuYWRkQ2xhc3MocGFzc3dvcmQubGVuZ3RoID4gNyA/IFwiaWNvbi1va1wiIDogXCJpY29uLXJlbW92ZVwiKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHJ1bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgJChcIiNcIiArIHJ1bGVzW2ldLlRhcmdldCkucmVtb3ZlQ2xhc3MobmV3IFJlZ0V4cChydWxlc1tpXS5QYXR0ZXJuKS50ZXN0KHBhc3N3b3JkKSA/IFwiaWNvbi1yZW1vdmVcIiA6IFwiaWNvbi1va1wiKTsgXG4gICAgJChcIiNcIiArIHJ1bGVzW2ldLlRhcmdldCkuYWRkQ2xhc3MobmV3IFJlZ0V4cChydWxlc1tpXS5QYXR0ZXJuKS50ZXN0KHBhc3N3b3JkKSA/IFwiaWNvbi1va1wiIDogXCJpY29uLXJlbW92ZVwiKTtcbiAgfVxufVxuXG4kKCcucGFzc3dvcmQtaW5wdXQtY2hlY2snKS5lYWNoKFxuICBmdW5jdGlvbihpbmRleCwgZWxlbWVudCkge1xuICAgIHZhciAkcGFzc3dvcmRJbnB1dCA9ICQodGhpcylcbiAgICB2YXIgaWQgPSAkcGFzc3dvcmRJbnB1dC5hdHRyKFwiaWRcIilcbiAgICB2YXIgdmFsaWRhdGVQYXNzd29yZEh0bWwgPSAkKGA8ZGl2IGlkPSd2YWxpZGF0aW9uLWZlZWRiYWNrLSR7aWR9Jz5gKVxuICAgIC5hcHBlbmQoYDxkaXYgaWQ9J2xlbmd0aC0ke2lkfScgY2xhc3M9J2ljb24tcmVtb3ZlJz44IGNoYXJhY3RlcnMgbWluaW11bTwvZGl2PmApXG4gICAgLmFwcGVuZChgPGRpdiBpZD0ndXBwZXItY2FzZS0ke2lkfScgY2xhc3M9J2ljb24tcmVtb3ZlJz5jb250YWluIGF0IGxlYXN0IDIgdXBwZXItY2FzZSBjaGFyYWN0ZXJzPC9kaXY+YClcbiAgICAuYXBwZW5kKGA8ZGl2IGlkPSdsb3dlci1jYXNlLSR7aWR9JyBjbGFzcz0naWNvbi1yZW1vdmUnPmNvbnRhaW4gYXQgbGVhc3QgMiBsb3dlci1jYXNlIGNoYXJhY3RlcnM8L2Rpdj5gKVxuICAgIC5hcHBlbmQoYDxkaXYgaWQ9J251bWJlcnMtJHtpZH0nIGNsYXNzPSdpY29uLXJlbW92ZScgc3R5bGU9J21hcmdpbi1ib3R0b206IDZweDsnPmNvbnRhaW4gYXQgbGVhc3QgMiBudW1iZXJzPC9kaXY+YCk7XG4gIFxuICAgICRwYXNzd29yZElucHV0LmJlZm9yZSh2YWxpZGF0ZVBhc3N3b3JkSHRtbCk7XG4gIH1cbik7XG5cbiQoJy5wYXNzd29yZC1pbnB1dC1jaGVjaycpLm9uKCdrZXl1cCcsIHZhbGlkYXRlUGFzc3dvcmQpOyIsInZhciBmb3JtcyA9ICQoJyNjb250ZW50IGZvcm0nKTtcbi8vdmFyIGlucHV0cyA9IGZvcm1zLmZpbmQoJy5mb3JtLWdyb3VwIGlucHV0Jyk7XG5cbmZvcm1zLmF0dHIoJ25vdmFsaWRhdGUnLCAnbm92YWxpZGF0ZScpO1xuXG4vKlxuZm9ybXMub24oJ3N1Ym1pdCcsIGZ1bmN0aW9uICgpIHtcbiAgaW5wdXRzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXN1bHQgPSB0aGlzLmNoZWNrVmFsaWRpdHkoKTtcbiAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgc2hvd1ZhbGlkYXRpb25NZXNzYWdlKHRoaXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBoaWRlVmFsaWRhdGlvbk1lc3NhZ2UodGhpcyk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHRoaXMuY2hlY2tWYWxpZGl0eSgpO1xufSk7XG5cbmlucHV0cy5vbignYmx1cicsIGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJlc3VsdCA9IHRoaXMuY2hlY2tWYWxpZGl0eSgpO1xuICBpZiAoIXJlc3VsdCkge1xuICAgIHNob3dWYWxpZGF0aW9uTWVzc2FnZSh0aGlzKTtcbiAgfSBlbHNlIHtcbiAgICBoaWRlVmFsaWRhdGlvbk1lc3NhZ2UodGhpcyk7XG4gIH1cbn0pO1xuXG52YXIgc2hvd1ZhbGlkYXRpb25NZXNzYWdlID0gZnVuY3Rpb24gKGZpZWxkKSB7XG5cbiAgdmFyIGZpZWxkID0gZmllbGQsXG4gICAgJGZpZWxkID0gJChmaWVsZCksXG4gICAgJHBhcmVudCA9ICRmaWVsZC5wYXJlbnQoKTtcblxuICBpZiAoJHBhcmVudC5oYXNDbGFzcygnc2hvdy1wYXNzd29yZCcpKSB7XG4gICAgJHBhcmVudCA9ICRwYXJlbnQucGFyZW50KCk7XG4gIH1cblxuICBpZiAoISRwYXJlbnQuaGFzQ2xhc3MoJ2dvdnVrLWZvcm0tZ3JvdXAtLWVycm9yJykpIHtcblxuICAgIHZhciBsYWJlbFRleHQgPSAkZmllbGQuZGF0YSgnbGFiZWwnKSB8fCAkKFwibGFiZWxbZm9yPSdcIiArICRmaWVsZC5hdHRyKCdpZCcpICsgXCInXVwiKS50ZXh0KCksXG4gICAgICBlcnJvck1lc3NhZ2VUZXh0ID0gJ0VudGVyIGEgdmFsaWQgJyArIGxhYmVsVGV4dC50b0xvd2VyQ2FzZSgpLFxuICAgICAgZXJyb3JNZXNzYWdlID0gJCgnPHAgY2xhc3M9XCJnb3Z1ay1ib2R5XCI+JylcbiAgICAgICAgLmh0bWwoZXJyb3JNZXNzYWdlVGV4dClcbiAgICAgICAgLnByb3AoJ2NsYXNzJywgJ2Vycm9yLW1lc3NhZ2UnKVxuICAgICAgICAucHJvcCgnaWQnLCAndmFsaWRhdGlvbi0nICsgc2x1Z2lmeShsYWJlbFRleHQpKTtcblxuICAgICRmaWVsZC5iZWZvcmUoZXJyb3JNZXNzYWdlKTtcbiAgICAkcGFyZW50LmFkZENsYXNzKCdnb3Z1ay1mb3JtLWdyb3VwLS1lcnJvcicpO1xuICAgICRmaWVsZC5hdHRyKHtcbiAgICAgICdhcmlhLWRlc2NyaWJlZGJ5JyA6ICd2YWxpZGF0aW9uLScgKyBzbHVnaWZ5KGxhYmVsVGV4dCksXG4gICAgICAnYXJpYS1pbnZhbGlkJzogJ3RydWUnXG4gICAgfSk7XG4gIH1cbn1cblxudmFyIGhpZGVWYWxpZGF0aW9uTWVzc2FnZSA9IGZ1bmN0aW9uIChmaWVsZCkge1xuICB2YXIgZmllbGQgPSBmaWVsZCxcbiAgICAkZmllbGQgPSAkKGZpZWxkKSxcbiAgICAkcGFyZW50ID0gJGZpZWxkLnBhcmVudCgpO1xuXG4gIGlmICgkcGFyZW50Lmhhc0NsYXNzKCdzaG93LXBhc3N3b3JkJykpIHtcbiAgICAkcGFyZW50ID0gJHBhcmVudC5wYXJlbnQoKTtcbiAgfVxuXG4gICRwYXJlbnQucmVtb3ZlQ2xhc3MoJ2dvdnVrLWZvcm0tZ3JvdXAtLWVycm9yJyk7XG4gICRwYXJlbnQuZmluZCgncC5lcnJvci1tZXNzYWdlJykucmVtb3ZlKCk7XG4gICRmaWVsZC5yZW1vdmVBdHRyKCdhcmlhLWRlc2NyaWJlZGJ5Jyk7XG4gICRmaWVsZC5yZW1vdmVBdHRyKCdhcmlhLWludmFsaWQnKTtcbn1cblxudmFyIHNsdWdpZnkgPSBmdW5jdGlvbiAodGV4dCkge1xuICByZXR1cm4gdGV4dC50b1N0cmluZygpLnRvTG93ZXJDYXNlKClcbiAgICAucmVwbGFjZSgvXFxzKy9nLCAnLScpXG4gICAgLnJlcGxhY2UoL1teXFx3XFwtXSsvZywgJycpXG4gICAgLnJlcGxhY2UoL1xcLVxcLSsvZywgJy0nKVxuICAgIC5yZXBsYWNlKC9eLSsvLCAnJylcbiAgICAucmVwbGFjZSgvLSskLywgJycpO1xufVxuXG4qL1xuIiwidmFyIE5TQSA9IE5TQSB8fCB7fTtcblxuTlNBID0ge1xuXG4gIGluaXRpYWxpc2VTaG93UGFzc3dvcmQgOiBmdW5jdGlvbiAoKSB7XG4gICAgLy8gR2V0IGFsbCB0aGUgcGFzc3dvcmQgaW5wdXRzIGluIHRoZSBwYWdlIGFuZCBsb29wIHRocm91Z2ggdGhlbSB0byBhZGQgdGhlIHNob3cvaGlkZSBidXR0b25cbiAgICB2YXIgJHBhc3N3b3JkSW5wdXRzID0gJCgnLnBhc3N3b3JkLWlucHV0Jyk7XG4gICAgJHBhc3N3b3JkSW5wdXRzLmVhY2goZnVuY3Rpb24gKGkpIHtcbiAgICAgIHZhciAkdGhhdCA9ICQodGhpcyk7XG4gICAgICAvLyBDcmVhdGUgc2hvdy9oaWRlIGJ1dHRvblxuICAgICAgdmFyICRzaG93QnV0dG9uID0gJCgnPGJ1dHRvbiAvPicpLnByb3AoeyB0eXBlOiAnYnV0dG9uJywgY2xhc3M6ICdzaG93LXBhc3N3b3JkIGdvdnVrLWJ1dHRvbiBnb3Z1ay1idXR0b24tLXNlY29uZGFyeSBnb3Z1ay0hLW1hcmdpbi1ib3R0b20tMScsIGFyaWFMYWJlbCA9ICdTaG93IHBhc3N3b3JkJyB9KTtcbiAgICAgICRzaG93QnV0dG9uLmh0bWwoJ1Nob3cnKTtcbiAgICAgIC8vIFdoZW4gY2xpY2tpbmcgb24gdGhhdCBidXR0b24gd2Ugd2lsbCBzaG93L2hpZGUgdGhlIHBhc3N3b3JkIGFjY29yZGluZ2x5XG4gICAgICAkc2hvd0J1dHRvbi5vbignY2xpY2snLCBmdW5jdGlvbigpe1xuICAgICAgICBpZigkdGhhdC5hdHRyKCd0eXBlJykgPT09ICdwYXNzd29yZCcpe1xuICAgICAgICAgICR0aGF0LmF0dHIoXCJ0eXBlXCIsIFwidGV4dFwiKTtcbiAgICAgICAgICAkc2hvd0J1dHRvbi50ZXh0KFwiSGlkZVwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAkdGhhdC5hdHRyKFwidHlwZVwiLCBcInBhc3N3b3JkXCIpO1xuICAgICAgICAgICRzaG93QnV0dG9uLnRleHQoXCJTaG93XCIpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIC8vIEFkZCBidXR0b24gdG8gdGhlIGRvY3VtZW50XG4gICAgICAkdGhhdC5hZnRlcigkc2hvd0J1dHRvbik7XG4gICAgfSk7XG4gIH0sXG5cbiAgYmFja0xpbms6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYmFja0xpbmsgPSAkKCc8YT4nKVxuICAgICAgLmF0dHIoeyAnaHJlZic6ICcjJywgXCJjbGFzc1wiOiBcImdvdnVrLWJhY2stbGluay1ib2xkXCIgfSlcbiAgICAgIC50ZXh0KCdCYWNrJylcbiAgICAgIC5vbignY2xpY2snLCBmdW5jdGlvbiAoZSkgeyB3aW5kb3cuaGlzdG9yeS5iYWNrKCk7IGUucHJldmVudERlZmF1bHQoKTsgfSk7XG4gICAgJCgnLmpzLWJhY2stbGluaycpLmh0bWwoYmFja0xpbmspO1xuICB9LFxufTtcblxuXG5pZiAoJCgnc2VsZWN0LnNlbGVjdDInKS5sZW5ndGggPiAwKSB7XG4gICQoJ3NlbGVjdC5zZWxlY3QyJykuc2VsZWN0Mih7bWF0Y2hlcjogc2VsZWN0Mk1vZGVsTWF0Y2hlcn0pO1xufVxuXG5mdW5jdGlvbiBzZWxlY3QyTW9kZWxNYXRjaGVyIChwYXJhbXMsIGRhdGEpIHtcbiAgZGF0YS5wYXJlbnRUZXh0ID0gZGF0YS5wYXJlbnRUZXh0IHx8IFwiXCI7XG4gIGlmICh0eXBlb2YocGFyYW1zLnRlcm0pID09PSAndW5kZWZpbmVkJyB8fCAhcGFyYW1zLnRlcm0gfHwgcGFyYW1zLnRlcm0udHJpbSgpID09PSAnJykge1xuICAgIHJldHVybiBkYXRhO1xuICB9XG4gIGlmIChkYXRhLmNoaWxkcmVuICYmIGRhdGEuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgIHZhciBtYXRjaCA9ICQuZXh0ZW5kKHRydWUsIHt9LCBkYXRhKTtcbiAgICBmb3IgKHZhciBjID0gZGF0YS5jaGlsZHJlbi5sZW5ndGggLSAxOyBjID49IDA7IGMtLSkge1xuICAgICAgdmFyIGNoaWxkID0gZGF0YS5jaGlsZHJlbltjXTtcbiAgICAgIGNoaWxkLnBhcmVudFRleHQgKz0gZGF0YS5wYXJlbnRUZXh0ICsgXCIgXCIgKyBkYXRhLnRleHQ7XG4gICAgICB2YXIgbWF0Y2hlcyA9IHNlbGVjdDJNb2RlbE1hdGNoZXIocGFyYW1zLCBjaGlsZCk7XG4gICAgICBpZiAobWF0Y2hlcyA9PSBudWxsKSB7XG4gICAgICAgIG1hdGNoLmNoaWxkcmVuLnNwbGljZShjLCAxKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG1hdGNoLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiBtYXRjaDtcbiAgICB9XG4gICAgcmV0dXJuIHNlbGVjdDJNb2RlbE1hdGNoZXIocGFyYW1zLCBtYXRjaCk7XG4gIH1cbiAgdmFyIG9yaWdpbmFsID0gKGRhdGEucGFyZW50VGV4dCArICcgJyArIGRhdGEudGV4dCkudG9VcHBlckNhc2UoKTtcbiAgdmFyIHRlcm0gPSBwYXJhbXMudGVybS50b1VwcGVyQ2FzZSgpO1xuICBpZiAob3JpZ2luYWwuaW5kZXhPZih0ZXJtKSA+IC0xKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbmlmICgkKCcucGFzc3dvcmQtaW5wdXQnKS5sZW5ndGggPiAwKSB7XG4gIE5TQS5pbml0aWFsaXNlU2hvd1Bhc3N3b3JkKCk7XG59XG5cbmlmICgkKCcuanMtYmFjay1saW5rJykpIHtcbiAgTlNBLmJhY2tMaW5rKCk7XG59XG5cbiQoJy51bmRlci1jb25zdHJ1Y3Rpb24nKS5vbignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuICBhbGVydCgnVGhpcyBmdW5jdGlvbmFsaXR5IGlzIG5vdCBhdmFpbGFibGUgeWV0Jyk7XG4gIGUucHJldmVudERlZmF1bHQoKTtcbn0pO1xuXG5pZiAoJCgnLm5vdGlmaWNhdGlvbiBzcGFuLmljb24nKS5sZW5ndGggPiAwKSB7XG4gICQoJy5ub3RpZmljYXRpb24gc3Bhbi5pY29uJykub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICQodGhpcykucGFyZW50KCkuaGlkZSgpO1xuICB9KTtcbn1cblxuaWYgKCQoJ2FydGljbGUub3JnYW5pc2F0aW9uLXNlcnZpY2VzJykubGVuZ3RoID4gMCkge1xuXG4gICQoJy5pbmZvcm1hdGlvbicpLm9uKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XG4gICAgdmFyIGluZm8gPSAkKHRoaXMpLnBhcmVudCgpLnBhcmVudCgpLmZpbmQoJy5zZXJ2aWNlLWRlc2NyaXB0aW9uJyk7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGluZm8udG9nZ2xlKCk7XG4gIH0pO1xuXG4gICQoJy5pbmZvLWxpbmsnKS5vbignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuICAgIHZhciBtZXRhID0gJCh0aGlzKS5wYXJlbnQoKS5uZXh0KCk7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIG1ldGEudG9nZ2xlKCk7XG4gIH0pO1xufVxuXG52YXIgc2VhcmNoRmllbGRzID0gJCgnZm9ybSAuc2VhcmNoLWZpZWxkJyk7XG5cbmlmIChzZWFyY2hGaWVsZHMubGVuZ3RoID4gMCkge1xuXG4gIHZhciBsb2FkZXIgPSAkKCc8c3BhbiAvPicpLmFkZENsYXNzKCdsb2FkZXIgc3Bpbm5lci1pbmxpbmUnKTtcbiAgdmFyIGIxID0gJCgnPHNwYW4gLz4nKS5hZGRDbGFzcygnYmFsbCBiLTEnKTtcbiAgdmFyIGIyID0gJCgnPHNwYW4gLz4nKS5hZGRDbGFzcygnYmFsbCBiLTInKTtcbiAgbG9hZGVyLmFwcGVuZChiMSkuYXBwZW5kKGIyKTtcblxuICBzZWFyY2hGaWVsZHMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGZvcm0gPSAkKHRoaXMpLnBhcmVudCgpO1xuICAgIHZhciBidXR0b24gPSBmb3JtLmZpbmQoJ2J1dHRvbicpO1xuICAgIGZvcm0ub24oJ3N1Ym1pdCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGJ1dHRvbi5hZnRlcihsb2FkZXIpLmhpZGUoKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbnZhciBmb3JtUmVnaXN0ZXIgPSAkKCcucHJldmVudC1mb3JtLWRvdWJsZS1zdWJtaXNzaW9uJyk7XG5cbmlmIChmb3JtUmVnaXN0ZXIubGVuZ3RoID4gMCkge1xuICBmb3JtUmVnaXN0ZXIuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgdmFyICRzdWJtaXRCdXR0b25zID0gJChmb3JtUmVnaXN0ZXIpLmZpbmQoJ2J1dHRvbjpzdWJtaXQnKSwgJHN1Ym1pdEJ1dHRvbiA9ICRzdWJtaXRCdXR0b25zLmVxKDApO1xuICAgIGZvcm1SZWdpc3Rlci5vbignc3VibWl0JywgZnVuY3Rpb24gKCkge1xuICAgICAgJHN1Ym1pdEJ1dHRvbnMuYXR0cignZGlzYWJsZWQnLCAnZGlzYWJsZWQnKTtcblxuICAgICAgJHN1Ym1pdEJ1dHRvbi5jc3MoJ21pbi13aWR0aCcsICRzdWJtaXRCdXR0b24ub3V0ZXJXaWR0aCgpICsgJ3B4Jyk7XG5cbiAgICAgICRzdWJtaXRCdXR0b24uYXBwZW5kKFwiPHNwYW4gY2xhc3M9J2xvYWRlciBzcGlubmVyLWlubGluZSc+IDxzcGFuIGNsYXNzPSdiYWxsIGItMSc+PC9zcGFuPiA8c3BhbiBjbGFzcz0nYmFsbCBiLTInPjwvc3Bhbj4gPHNwYW4gY2xhc3M9J2JhbGwgYi0zJz48L3NwYW4+IDwvc3Bhbj5cIik7XG5cbiAgICB9KTtcbiAgfSk7XG59XG5cbiQoJy5hdXRvLXNjcm9sbC1vbi1jaGFuZ2UnKS5vbignY2hhbmdlJywgZnVuY3Rpb24oZSkge1xuICAkKHdpbmRvdykuc2Nyb2xsVG9wKCQoJy5hdXRvLXNjcm9sbC1kZXN0JykucG9zaXRpb24oKS50b3ApO1xufSk7XG5cbiQoJy5jbG9zZS1idXR0b24nKS5vbignY2xpY2snLCBmdW5jdGlvbihlKSB7XG4gIHZhciBub3RpZmljYXRpb24gPSBlLnRhcmdldC5jbG9zZXN0KFwiLmdvdnVrLW5vdGlmaWNhdGlvbi1iYW5uZXJcIik7XG4gIG5vdGlmaWNhdGlvbi5yZW1vdmUoKTtcbn0pO1xuXG4vLyBzZWxlY3QgbmV4dCBlbGVtZW50IGluIHRoZSB0ZW1wbGF0ZSwgc2hvdyBpdCBhbmQgaGlkZSB0aGUgdG9nZ2xlIGxpbmtcbiQoJy50b2dnbGUtb3BlbicpLm9uKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XG4gIHZhciBtZXRhID0gJCh0aGlzKS5uZXh0KCk7XG4gIGUucHJldmVudERlZmF1bHQoKTtcbiAgbWV0YS5yZW1vdmVDbGFzcygnZ292dWstdmlzdWFsbHktaGlkZGVuJyk7XG4gICQodGhpcykuYWRkQ2xhc3MoJ2dvdnVrLXZpc3VhbGx5LWhpZGRlbicpO1xufSk7XG5cbi8vICNyZWdpb24gU2Vzc2lvbiB0aW1lIG91dFxuXG52YXIgdGFiSWQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcblxuZnVuY3Rpb24gc2Vzc2lvblRpbWVvdXQoKSB7XG4gIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCd1cmknKTtcblxuICB3aW5kb3cub25mb2N1cyA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb3VudFRpbWVEaWZmKCk7XG4gIH1cblxuICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXG4gICAgLy8gVGFicyBhcmUgc2V0IHRvIGNoZWNrIGlmIG90aGVyIHRhYnMgcnVubmluZyB0aW1lciB0aGVuIHNldCB0byAxXG4gICAgLy8gd2hlbiBzZXQgdG8gMCBtZWFucyAnU3RheSBzaWduZWQgaW4nIGlzIHNlbGVjdGVkXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3RhYnMnLCAgJzEnKTtcblxuICAgICQoJy5zZXNzaW9uLXRpbWVvdXQtb3ZlcmxheScpLnNob3coKTtcbiAgICAkKCcjbW9kYWwtc2lnbmluJykuZm9jdXMoKTtcblxuICAgIHN0YXJ0VGltZXIoKTtcbiAgfSwgMTQgKiA1OSAqIDEwMDApOyAvLyBtaW51dGUgKiBzZWNvbmRzICogbWlsbGlzZWNvbmRzIGUuZyAxNCAqIDU5ICogMTAwMFxufVxuXG4kKCcjbW9kYWwtc2lnbmluJykub24oXCJjbGlja1wiLCAoKT0+e1xuICBjbGVhckludGVydmFsKHRpbWVvdXRUaW1lcik7XG4gIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd0YWJzJywgJzAnKVxuICBsb2NhdGlvbi5yZWxvYWQoKTtcbn0pO1xuXG4kKCcjbW9kYWwtc2lnbm91dCcpLm9uKFwiY2xpY2tcIiwgKCk9PntcbiAgY2xlYXJJbnRlcnZhbCh0aW1lb3V0VGltZXIpO1xuICBsb2NhdGlvbi5ocmVmID0gJy9zaWdub3V0J1xufSk7XG5cbnZhciB0aW1lb3V0VGltZXI7XG5cbmZ1bmN0aW9uIHN0YXJ0VGltZXIoKSB7XG4gIHZhciB0aW1lUGxhY2VIb2xkZXIgPSBcIjQgbWludXRlcyBhbmQgNjAgc2Vjb25kc1wiXG5cbiAgdGltZW91dFRpbWVyID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG5cbiAgaWYgKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0YWJzJykgPT09ICcwJyl7XG4gICAgY2xlYXJJbnRlcnZhbCh0aW1lb3V0VGltZXIpO1xuICAgIGxvY2F0aW9uLnJlbG9hZCgpO1xuICB9XG5cbiAgdmFyIHRpbWVyID0gdGltZVBsYWNlSG9sZGVyLnNwbGl0KCdhbmQnKTtcbiAgdmFyIG1pbnV0ZXMgPSBwYXJzZUludCh0aW1lclswXSwgMTApO1xuICB2YXIgc2Vjb25kcyA9IHBhcnNlSW50KHRpbWVyWzFdLCAxMCk7XG4gIC0tc2Vjb25kcztcbiAgbWludXRlcyA9IChzZWNvbmRzIDwgMCkgPyAtLW1pbnV0ZXMgOiBtaW51dGVzO1xuICBzZWNvbmRzID0gKHNlY29uZHMgPCAwKSA/IDU5IDogc2Vjb25kcztcbiAgc2Vjb25kcyA9IChzZWNvbmRzIDwgMTApID8gJzAnICsgc2Vjb25kcyA6IHNlY29uZHM7XG5cbiAgJCgnI21pbnV0ZXMnKS5odG1sKG1pbnV0ZXMpO1xuICAkKCcjc2Vjb25kcycpLmh0bWwoc2Vjb25kcyk7XG5cbiAgaWYgKG1pbnV0ZXMgPCAwIHx8IChzZWNvbmRzIDw9IDApICYmIChtaW51dGVzIDw9IDApKSB7XG4gICAgY2FsbFRpbWVvdXQoKTtcbiAgIH0gZWxzZSBpZih0YWJJZCkge1xuICAgIGNvdW50VGltZURpZmYoKTtcbiAgIH1cblxuICB0aW1lUGxhY2VIb2xkZXIgPSBtaW51dGVzICsgJyBtaW51dGVzIGFuZCAnICsgc2Vjb25kcyArICcgc2Vjb25kcyc7XG59LCAxMDAwKTtcbn1cblxuZnVuY3Rpb24gY2FsbFRpbWVvdXQoKSB7XG4gIGNsZWFySW50ZXJ2YWwodGltZW91dFRpbWVyKTtcbiAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3VyaScsIGxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgbG9jYXRpb24uaHJlZiA9ICcvc2lnbm91dCc7XG59XG5cbmZ1bmN0aW9uIGNvdW50VGltZURpZmYoKSB7XG4gIHZhciBkaWZmID0gbmV3IERhdGUoKS5nZXRUaW1lKCkgLSBOdW1iZXIodGFiSWQpO1xuICB2YXIgbWludXRlcyA9IGRpZmYvKDYwICogMTAwMCk7XG5cbiAgaWYgKG1pbnV0ZXMgPiAyMCkge1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd1cmknLCBsb2NhdGlvbi5wYXRobmFtZSk7XG4gICAgY2xlYXJJbnRlcnZhbCh0aW1lb3V0VGltZXIpO1xuICAgIGxvY2F0aW9uLnJlbG9hZCgpO1xuICB9XG59XG5cbi8vICNlbmRyZWdpb25cblxudmFyIHNob3dIaWRlQ29udGVudCA9IG5ldyBHT1ZVSy5TaG93SGlkZUNvbnRlbnQoKVxuc2hvd0hpZGVDb250ZW50LmluaXQoKVxuXG5HT1ZVSy5kZXRhaWxzLmluaXQoKVxuIl19
