var COOKIE_NAMES={PREFERENCES_SET:"cookies_preferences_set",POLICY:"cookies_policy",GA:"_ga",GA_GID:"_gid",GA_GAT:"_gat",USER_BANNER_LAST_SEEN:"user_banner_last_seen"},GOVUK_COOKIE_OPTIONS={expires:365,secure:!0,domain:".education.gov.uk"},GovUKCookie={getRaw:function(e){if(window.Cookies)return window.Cookies.get(e)},get:function(e){if(window.Cookies){var t=window.Cookies.get(e);return t?JSON.parse(t):t}},set:function(e,t){if(window.Cookies)return window.Cookies.set(e,t,GOVUK_COOKIE_OPTIONS)},remove:function(e){if(window.Cookies)return window.Cookies.remove(e,GOVUK_COOKIE_OPTIONS)}};function checkConditionForUsersBanner(){var e=GovUKCookie.getRaw(COOKIE_NAMES.USER_BANNER_LAST_SEEN);return!e||((new Date).getTime()-e)/864e5>90}function showReviewUsersBanner(){$("#review-users-banner").show()}function setReviewUsersBannerLastSeen(){GovUKCookie.set(COOKIE_NAMES.USER_BANNER_LAST_SEEN,(new Date).getTime())}function loadReviewUsersBanner(){checkConditionForUsersBanner()&&showReviewUsersBanner()}function updateCookieReviewUsersBanner(){checkConditionForUsersBanner()&&setReviewUsersBannerLastSeen()}GovUKCookie.remove(COOKIE_NAMES.POLICY),GovUKCookie.remove(COOKIE_NAMES.PREFERENCES_SET),GovUKCookie.remove(COOKIE_NAMES.GA),GovUKCookie.remove(COOKIE_NAMES.GA_GAT),GovUKCookie.remove(COOKIE_NAMES.GA_GID),function(e){"use strict";var t=e.GOVUK||{};t.details={NATIVE_DETAILS:"boolean"==typeof document.createElement("details").open,KEY_ENTER:13,KEY_SPACE:32,started:!1,addEvent:function(e,t,n){e.addEventListener?e.addEventListener(t,(function(e){n(e,e.target)}),!1):e.attachEvent&&e.attachEvent("on"+t,(function(e){n(e,e.srcElement)}))},removeEvent:function(e,t){e.removeEventListener?e.removeEventListener(t,(function(e){}),!1):e.detachEvent&&e.detachEvent("on"+t,(function(e){}))},charCode:function(e){return"number"==typeof e.which?e.which:e.keyCode},preventDefault:function(e){e.preventDefault?e.preventDefault():e.returnValue=!1},addClickEvent:function(e,n){t.details.addEvent(e,"keypress",(function(e,o){t.details.charCode(e)!==t.details.KEY_ENTER&&t.details.charCode(e)!==t.details.KEY_SPACE||"summary"===o.nodeName.toLowerCase()&&(t.details.preventDefault(e),o.click?o.click():n(e,o))})),t.details.addEvent(e,"keyup",(function(e,n){t.details.charCode(e)===t.details.KEY_SPACE&&"SUMMARY"===n.nodeName&&t.details.preventDefault(e)})),t.details.addEvent(e,"click",(function(e,t){n(e,t)}))},getAncestor:function(e,t){do{if(!e||e.nodeName.toLowerCase()===t)break;e=e.parentNode}while(e);return e},addDetailsPolyfill:function(e,n){if(n=n||document.body,!t.details.started&&(t.details.started=!0,0!==(e=n.getElementsByTagName("details")).length)){for(var o=e.length,a=0;a<o;a++){var i=e[a];if(i.__summary=i.getElementsByTagName("summary").item(0),i.__content=i.getElementsByTagName("div").item(0),!i.__summary||!i.__content)return;i.__content.id||(i.__content.id="details-content-"+a),i.setAttribute("role","group"),i.__summary.setAttribute("role","button"),i.__summary.setAttribute("aria-controls",i.__content.id),t.details.NATIVE_DETAILS||(i.__summary.tabIndex=0);var r=null!==i.getAttribute("open");if(!0===r?(i.__summary.setAttribute("aria-expanded","true"),i.__content.setAttribute("aria-hidden","false")):(i.__summary.setAttribute("aria-expanded","false"),i.__content.setAttribute("aria-hidden","true"),t.details.NATIVE_DETAILS||(i.__content.style.display="none")),i.__summary.__details=i,!t.details.NATIVE_DETAILS){var s=document.createElement("i");!0===r?(s.className="arrow arrow-open",s.appendChild(document.createTextNode("▼"))):(s.className="arrow arrow-closed",s.appendChild(document.createTextNode("►"))),i.__summary.__twisty=i.__summary.insertBefore(s,i.__summary.firstChild),i.__summary.__twisty.setAttribute("aria-hidden","true")}}t.details.addClickEvent(n,(function(e,n){return!(n=t.details.getAncestor(n,"summary"))||t.details.statechange(n)}))}},statechange:function(e){var n="true"===e.__details.__summary.getAttribute("aria-expanded"),o="true"===e.__details.__content.getAttribute("aria-hidden");(e.__details.__summary.setAttribute("aria-expanded",n?"false":"true"),e.__details.__content.setAttribute("aria-hidden",o?"false":"true"),t.details.NATIVE_DETAILS)||(e.__details.__content.style.display=n?"none":"",null!==e.__details.getAttribute("open")?e.__details.removeAttribute("open"):e.__details.setAttribute("open","open"));return e.__twisty&&(e.__twisty.firstChild.nodeValue=n?"►":"▼",e.__twisty.setAttribute("class",n?"arrow arrow-closed":"arrow arrow-open")),!0},destroy:function(e){t.details.removeEvent(e,"click")},init:function(e){t.details.addEvent(document,"DOMContentLoaded",t.details.addDetailsPolyfill),t.details.addEvent(window,"load",t.details.addDetailsPolyfill)}},e.GOVUK=t}(window);var NSA=NSA||{},filterBoxes=$(".filter-box");function toKebabCase(e){return e.toLowerCase().replace(/\s+/g,"-")}function updateCount(e){const t=toKebabCase(e),n=$(`.${t} .govuk-checkboxes__input:checked`).length;$(`#${t}-count`).text(n)}function updateCategoryHeader(e){const t=toKebabCase(e),n=$(`#${t}-text`),o=$(`input[id^='show-hide-${t}']:checked`).length>0;n.css("display",o?"block":"none")}function updateNoFilterMessage(){const e=$(".govuk-checkboxes__input.dfe-filter-input:checked").length>0;$("#show-hide-selected-filters").css("display",e?"none":"block")}function showMe(e,t,n){const o=$(`#${n}`).prop("checked");$(`#${e}`).css("display",o?"block":"none"),updateCategoryHeader(t),updateNoFilterMessage()}function hideMe(e,t,n){$(`#${e}`).hide(),$(`#${n}`).prop("checked",!1),updateCount(t),updateCategoryHeader(t),updateNoFilterMessage()}function initializeFilters(){$(".govuk-checkboxes__input.dfe-filter-input").each((function(){if($(this).prop("checked")){const e=$(this).attr("id"),t=e.match(/show-hide-(.+)-(\d+)/);if(t&&3===t.length){const n=t[1];showMe(`${n}-option-${t[2]}`,n,e),updateCount(n),updateCategoryHeader(n),updateNoFilterMessage()}}}))}NSA.filters={init:function(){filterBoxes.each((function(){var e=$(this),t=e.find(".container-head"),n=t.find(".option-select-label"),o=e.find("input:checkbox"),a=$("<button />").addClass("js-container-head"),i=$("<div />").addClass("js-selected-counter");a.on("click",(function(e){var t=$(this).next();$(this).hasClass("closed")?(t.show(),$(this).removeClass("closed").attr("aria-expanded",!0)):(t.hide(),$(this).addClass("closed").attr("aria-expanded",!1)),e.preventDefault()})).append(n,i),t.replaceWith(a),o.on("change",(function(){i.text((function(){return o.filter(":checked").length>0?o.filter(":checked").length+" selected":""}))}))}))}},filterBoxes.length>0&&NSA.filters.init(),$(document).ready((()=>{initializeFilters()})),(NSA=NSA||{}).modal={elems:{links:$(".modal-link"),modals:$(".modal")},init:function(){this.modalBg(),this.setUpEvents()},modalBg:function(){var e=this,t=$("<div>").addClass("modal-bg").hide().on("click",(function(){e.hideModals()}));$("body").append(t)},setUpEvents:function(){var e=this;this.elems.links.on("click",(function(t){var n=$(this).attr("href");e.showModal($(n)),t.preventDefault()})),e.elems.modals.find(".close").on("click",(function(t){e.hideModals(),t.preventDefault()})),$("body").on("keydown",(function(t){27===(t.keyCode||t.which)&&e.hideModals()}))},showModal:function(e){$("html").addClass("modal-open"),$(".modal-bg").show(),e.show()},hideModals:function(){$("html").removeClass("modal-open"),$(".modal-bg").hide(),this.elems.modals.hide()}},NSA.modal.init();const RESPONSE_TYPE_CODE="code",RESPONSE_TYPE_ID_TOKEN="ID token",RESPONSE_TYPE_TOKEN="token",FLOW_TYPE_IMPLICIT="implicit",FLOW_TYPE_AUTHORISATION="authorisation",FLOW_TYPE_HYBRID="hybrid";function getParameterByName(e,t){t||(t=window.location.href),e=e.replace(/[\[\]]/g,"\\$&");var n=new RegExp("[?&]"+e+"(=([^&#]*)|&|#|$)").exec(t);return n?n[2]?decodeURIComponent(n[2].replace(/\+/g," ")):"":null}function sortTable(e){var t,n,o,a,i,r,s,l,d=0;for(t=$("table.sortable"),o=!0,l="a";o;){for(o=!1,n=t.find("tr"),a=1;a<n.length-1;a++)if(s=!1,i=n[a].getElementsByTagName("TD")[e],r=n[a+1].getElementsByTagName("TD")[e],"a"===l){if(i.innerHTML.toLowerCase()>r.innerHTML.toLowerCase()){s=!0;break}}else if("d"===l&&i.innerHTML.toLowerCase()<r.innerHTML.toLowerCase()){s=!0;break}s?(n[a].parentNode.insertBefore(n[a+1],n[a]),o=!0,d++):0===d&&"a"===l&&(l="d",o=!0)}return l}$((()=>{const e=(e,t,n)=>{const o=$(`#${e}-add`),a=$(`${t}`);o.on("click",(function(){let t=parseInt(a.data(`${e}-counter`),10);const o=`${e}-${t}`;return $(`\n      <div class="govuk-body dfe-flex-container" id="${e}-input-group-${t}">\n        <label for="${o}" class="govuk-label govuk-label--s govuk-visually-hidden">\n          ${n}\n        </label>\n        <input\n          class="form-control dfe-flex-input-grow govuk-input"\n          id="${o}"\n          name="${e}"\n        />\n        <a href="#" class="govuk-link govuk-link--no-visited-state remove-redirect" id="${e}-remove-${t}" data-group-id="${t}">Remove</a>\n      </div>`).appendTo(a),t+=1,a.data(`${e}-counter`,t),$(this).trigger("blur"),!1})),a.on("click",".remove-redirect",(function(t){t.preventDefault();const n=$(this).data("group-id");$(`#${e}-input-group-${n}`).remove(),$(this).trigger("blur");const o=a.find(".dfe-flex-container").length;a.data(`${e}-counter`,o)}))};function t(e,t,n){$(e).on("click",(function(){const e=window.niceware.generatePassphrase(8).join("-");return window.confirm(n)&&$(`input#${t}`).attr("value",e),$(this).trigger("blur"),!1}))}function n(){const e=[];$("#response_types-id_token").is(":checked")&&e.push("ID token"),$("#response_types-token").is(":checked")&&e.push("token"),$("#response_types-code").is(":checked")&&e.push("code");let t="";if(e.length>0){e.sort(((e,t)=>{const n=["code","ID token","token"];return n.indexOf(e)-n.indexOf(t)}));let n="implicit";if(1===e.length&&e.includes("code")?n="authorisation":(e.includes("code")&&e.includes("token")||e.includes("code")&&e.includes("ID token"))&&(n="hybrid"),1===e.length&&e.includes("token"))t="";else{let o;if(e.length>1){o=`${e.slice(0,-1).join(", ")} and ${e[e.length-1]}`}else[o]=e;t=`\n            <div class="govuk-warning-text govuk-!-margin-top-5 govuk-!-margin-bottom-0">\n                <span class="govuk-warning-text__icon" aria-hidden="true">!</span>\n                <strong class="govuk-warning-text__text">\n                    <span class="govuk-warning-text__assistive">Warning</span>\n                    You have selected ${o} as your response type. This means ${n} flow is your flow.\n                </strong>\n            </div>\n        `}}$(".govuk-warning-text").remove(),t&&$("#response_types-fieldset").append(t);const n=$("#response_types-code").offset().top,o=$(window).scrollTop();$("#response_types-code").is(":checked")?($("#refresh_token-wrapper :input, #clientSecret-wrapper :input, #tokenEndpointAuthMethod-wrapper select").prop("disabled",!1),$("#refresh_token-wrapper, #clientSecret-wrapper, #tokenEndpointAuthMethod-wrapper").slideDown(500)):$("#refresh_token-wrapper, #clientSecret-wrapper, #tokenEndpointAuthMethod-wrapper").slideUp(500,(()=>{$("#refresh_token-wrapper :input, #clientSecret-wrapper :input, #tokenEndpointAuthMethod-wrapper select").prop("disabled",!0)}));const a=$("#response_types-code").offset().top-n;$("html, body").animate({scrollTop:o+a},50,"linear")}e("redirect_uris","#redirect_uris-form-group","Redirect URL"),e("post_logout_redirect_uris","#post_logout_redirect_uris-form-group","Logout redirect URL"),t("#generate-clientSecret","clientSecret","Are you sure you want to regenerate the client secret?"),t("#generate-apiSecret","apiSecret","Are you sure you want to regenerate the API secret?"),n(),$("#response_types-id_token, #response_types-token, #response_types-code").on("change",(()=>{n()}))})),function(e){"use strict";var t=e.jQuery,n=e.GOVUK||{};function o(){var e=this,n="ShowHideContent",o='[data-target] > input[type="radio"]',a='[data-target] > input[type="checkbox"]',i="a.js-toggle-content";function r(){var e=t(this),n=s(e);n.length&&(e.attr("aria-controls",n.attr("id")),e.attr("aria-expanded","false"),n.attr("aria-hidden","true"))}function s(e){var n=e.attr("aria-controls");return n||(n=e.closest("[data-target]").data("target")),t("#"+n)}function l(e,t){t.hasClass("js-hidden")&&(t.removeClass("js-hidden"),t.attr("aria-hidden","false"),e.attr("aria-controls")&&e.attr("aria-expanded","true"))}function d(e,t){(t=t||s(e)).hasClass("js-hidden")||(t.addClass("js-hidden"),t.attr("aria-hidden","true"),e.attr("aria-controls")&&e.attr("aria-expanded","false"))}function c(e,n){var a=o+"[name="+(e.attr("name").replace("[","\\[").replace("]","\\]")+"][aria-controls]"),i=e.closest("form");(i.length?i.find(a):t(a)).each((function(){d(t(this))})),e.is("[aria-controls]")&&l(e,n)}function u(e,t){e.is(":checked")?l(e,t):d(e,t)}function p(e,t,n){t.hasClass("js-hidden")?l(e,t):d(e,t),n.preventDefault()}function h(e,o,a,i){function l(e){var n=t(this);i(n,s(n),e)}e=e||t(document.body);var d=t(o);d.each(r),t.each(a,(function(t,o){e.on("click."+n,o,l)})),d.is(":checked")&&d.filter(":checked").each(l)}e.showHideRadioToggledContent=function(e){var n;h(e,o,(n=[],t(o).map((function(){var e=t(this).attr("name");return-1===t.inArray(e,n)?(n.push(e),'input[type="radio"][name="'+t(this).attr("name")+'"]'):null}))),c)},e.showHideCheckboxToggledContent=function(e){h(e,a,[a],u)},e.showHideLinkToggledContent=function(e){h(e,i,[i],p)},e.destroy=function(e){(e=e||t(document.body)).off("."+n)}}o.prototype.init=function(e){this.showHideRadioToggledContent(e),this.showHideCheckboxToggledContent(e),this.showHideLinkToggledContent(e)},n.ShowHideContent=o,e.GOVUK=n}(window),(NSA=NSA||{}).signin={form:$(".form-signin"),init:function(){this.setupEvents()},setupEvents:function(){this.form.on("submit",this,this.handleSubmit)},handleSubmit:function(e){var t=$(this),n=t.find("input").not(":checkbox"),o={},a=$(this).find("button:submit"),i=a.eq(0);a.attr("disabled","disabled"),i.css("min-width",i.outerWidth()+"px"),i.find(".loader").removeClass("vh"),n.each((function(){o[this.name]=$(this).val()})),$(".password-input").each((function(e){$(this).attr("type","password"),$(this).siblings(".show-password").html("Show")})),$.ajax({type:"POST",data:o,url:t.attr("action"),context:e.data,dataType:"json",success:function(e){e.redirect?(window.location.href=e.uri,$("title").html("DfE Sign-in")):e.isFailedLogin?(this.resetValidation(t),$("title").html("Error: DfE Sign-in"),e.delayTill?this.showValidationMessage(e.validationMessages,!0):(this.showValidationMessage(e.validationMessages),a.removeAttr("disabled")),this.showInlineValidation(e.validationMessages),i.find(".loader").addClass("vh")):this.buildFormAndSubmit(e)},error:function(){this.resetValidation(t),this.showValidationMessage(),a.removeAttr("disabled"),i.find(".loader").addClass("vh")}}),e.preventDefault()},resetValidation:function(e){$(".govuk-error-summary").remove(),e.find(".govuk-form-group").each((function(){var e=$(this).find("input").eq(0);$(this).hasClass("govuk-form-group--error")&&($(this).removeClass("govuk-form-group--error"),$(this).find("span.govuk-error-message").remove(),e.removeAttr("aria-describedby").removeAttr("aria-invalid"))}))},showValidationMessage:function(e,t){var n=$("<div />").attr("class","govuk-error-summary govuk-!-margin-top-6").attr("role","alert").attr("tabindex","-1").attr("aria-labelledby","error-summary-title"),o=$("<h2 />").attr("class","govuk-error-summary__title").attr("id","error-summary"),a=$("<div />").attr("class","govuk-error-summary__body"),i=$("<ul />").attr("class","govuk-list govuk-error-summary__list");if(e){if(o.text("There is a problem"),$.each(e,(function(e,t){"loginError"===e&&(e="username");var n=$("<a />").attr("class","govuk-link").attr("href","#"+e).text(t),o=$("<li />").append(n);i.append(o)})),t){var r=$("<a />").attr("class","govuk-link-bold").attr("href","").attr("onclick","window.location.reload()").text("Refresh this page").css("color","#1d70b8"),s=$("<li />").append(r);i.append(s)}}else{o.text("There has been an error");s=$("<li />").html('Please try again later. If the problem continues, follow the link to <a href="https://help.signin.education.gov.uk/contact/form">submit a support request</a>');i.append(s)}n.append(o).append(a.append(i)),$("main").prepend(n),$("html, body").animate({scrollTop:n.offset().top-15},300)},showInlineValidation:function(e){$.each(e,(function(e,t){var n=$("input[name="+e+"]"),o=n.parent(),a=o.find("label").first();if(!o.hasClass("govuk-form-group--error"))var i=$('<span class="govuk-body">').html('<span class="govuk-visually-hidden">Error:</span>'+t).prop("class","govuk-error-message").prop("id","validation-"+e);a.after(i),o.addClass("govuk-form-group--error"),n.attr({"aria-describedby":"validation-"+e,"aria-invalid":"true"})}))},buildFormAndSubmit:function(e){var t=$("<form />").attr({method:"post",action:e.destination,id:"dfesigninform"});$.each(e.postbackData,(function(e,n){var o=$("<input />").attr({type:"hidden",name:e,value:n});t.append(o)})),$("#dfesigninform").remove(),$("body").append(t),t.submit()}},$(".form-signin").length>0&&NSA.signin.init(),$((function(){$("table.sortable thead th").on("click",(function(){var e=$("table.sortable thead tr th");e.removeClass("sorted").removeClass("dir-a").removeClass("dir-d");var t=sortTable(e.index($(this)));$(this).addClass("sorted dir-"+t)}))}));var toggleTips=$(".toggle-help");function validatePassword(){var e=$(this).attr("id"),t=[{Pattern:/(.*[A-Z]){2}/,Target:`upper-case-${e}`},{Pattern:/(.*[a-z]){2}/,Target:`lower-case-${e}`},{Pattern:/(.*\d){2}/,Target:`numbers-${e}`}],n=$(this).val();$(`#length-${e}`).removeClass(n.length>7?"icon-remove":"icon-ok"),$(`#length-${e}`).addClass(n.length>7?"icon-ok":"icon-remove");for(var o=0;o<t.length;o++)$("#"+t[o].Target).removeClass(new RegExp(t[o].Pattern).test(n)?"icon-remove":"icon-ok"),$("#"+t[o].Target).addClass(new RegExp(t[o].Pattern).test(n)?"icon-ok":"icon-remove")}toggleTips.each((function(){var e,t,n,o;e=$(this),n=$("<span />").attr("class","toggletip"),o=$("<button />").attr("type","button").attr("aria-label","Help").attr("data-toggletip-content",e.html()).text("?").on("click",(function(){var t=$(this).data("toggletip-content"),n=$(this).next();window.setTimeout((function(){n.html((function(){return $("<span />").attr("class",(function(){return e.html().length>50?"bubble long":"bubble"})).text(t)}))}),100)})).on("keydown",(function(e){27===(e.keyCode||e.which)&&t.html("")})),t=$("<span />").attr("role","status"),n.append(o,t),e.before(n).remove(),$(document).on("click",(function(n){e[0]!==$(n.target)&&t.html("")}))})),$(".password-input-check").each((function(e,t){var n=$(this),o=n.attr("id"),a=$(`<div id='validation-feedback-${o}'>`).append(`<div id='length-${o}' class='icon-remove'>8 characters minimum</div>`).append(`<div id='upper-case-${o}' class='icon-remove'>contain at least 2 upper-case characters</div>`).append(`<div id='lower-case-${o}' class='icon-remove'>contain at least 2 lower-case characters</div>`).append(`<div id='numbers-${o}' class='icon-remove' style='margin-bottom: 6px;'>contain at least 2 numbers</div>`);n.before(a)})),$(".password-input-check").on("keyup",validatePassword);var forms=$("#content form");forms.attr("novalidate","novalidate");NSA=NSA||{};function select2ModelMatcher(e,t){if(t.parentText=t.parentText||"",void 0===e.term||!e.term||""===e.term.trim())return t;if(t.children&&t.children.length>0){for(var n=$.extend(!0,{},t),o=t.children.length-1;o>=0;o--){var a=t.children[o];a.parentText+=t.parentText+" "+t.text,null==select2ModelMatcher(e,a)&&n.children.splice(o,1)}return n.children.length>0?n:select2ModelMatcher(e,n)}var i=(t.parentText+" "+t.text).toUpperCase(),r=e.term.toUpperCase();return i.indexOf(r)>-1?t:null}NSA={initialiseShowPassword:function(){$(".password-input").each((function(e){var t=$(this),n=$("<button />").prop({type:"button",class:"show-password govuk-button govuk-button--secondary govuk-!-margin-bottom-1",ariaLabel:ariaLabel="Show password"});n.html("Show"),n.on("click",(function(){"password"===t.attr("type")?(t.attr("type","text"),n.text("Hide")):(t.attr("type","password"),n.text("Show"))})),t.after(n)}))},backLink:function(){var e=$("<a>").attr({href:"#",class:"govuk-back-link-bold"}).text("Back").on("click",(function(e){window.history.back(),e.preventDefault()}));$(".js-back-link").html(e)}},$("select.select2").length>0&&$("select.select2").select2({matcher:select2ModelMatcher}),$(".password-input").length>0&&NSA.initialiseShowPassword(),$(".js-back-link")&&NSA.backLink(),$(".under-construction").on("click",(function(e){alert("This functionality is not available yet"),e.preventDefault()})),$(".notification span.icon").length>0&&$(".notification span.icon").on("click",(function(){$(this).parent().hide()})),$("article.organisation-services").length>0&&($(".information").on("click",(function(e){var t=$(this).parent().parent().find(".service-description");e.preventDefault(),t.toggle()})),$(".info-link").on("click",(function(e){var t=$(this).parent().next();e.preventDefault(),t.toggle()})));var searchFields=$("form .search-field");if(searchFields.length>0){var loader=$("<span />").addClass("loader spinner-inline"),b1=$("<span />").addClass("ball b-1"),b2=$("<span />").addClass("ball b-2");loader.append(b1).append(b2),searchFields.each((function(){var e=$(this).parent(),t=e.find("button");e.on("submit",(function(){t.after(loader).hide()}))}))}var formRegister=$(".prevent-form-double-submission");formRegister.length>0&&formRegister.each((function(){var e=$(formRegister).find("button:submit"),t=e.eq(0);formRegister.on("submit",(function(){e.attr("disabled","disabled"),t.css("min-width",t.outerWidth()+"px"),t.append("<span class='loader spinner-inline'> <span class='ball b-1'></span> <span class='ball b-2'></span> <span class='ball b-3'></span> </span>")}))})),$(".auto-scroll-on-change").on("change",(function(e){$(window).scrollTop($(".auto-scroll-dest").position().top)})),$(".close-button").on("click",(function(e){e.target.closest(".govuk-notification-banner").remove()})),$(".toggle-open").on("click",(function(e){var t=$(this).next();e.preventDefault(),t.removeClass("govuk-visually-hidden"),$(this).addClass("govuk-visually-hidden")}));var timeoutTimer,tabId=(new Date).getTime();function sessionTimeout(){localStorage.removeItem("uri"),window.onfocus=function(){countTimeDiff()},setTimeout((function(){localStorage.setItem("tabs","1"),$(".session-timeout-overlay").show(),$("#modal-signin").focus(),startTimer()}),826e3)}function startTimer(){var e="4 minutes and 60 seconds";timeoutTimer=setInterval((function(){"0"===localStorage.getItem("tabs")&&(clearInterval(timeoutTimer),location.reload());var t=e.split("and"),n=parseInt(t[0],10),o=parseInt(t[1],10);n=--o<0?--n:n,o=(o=o<0?59:o)<10?"0"+o:o,$("#minutes").html(n),$("#seconds").html(o),n<0||o<=0&&n<=0?callTimeout():tabId&&countTimeDiff(),e=n+" minutes and "+o+" seconds"}),1e3)}function callTimeout(){clearInterval(timeoutTimer),localStorage.setItem("uri",location.pathname),location.href="/signout"}function countTimeDiff(){((new Date).getTime()-Number(tabId))/6e4>20&&(localStorage.setItem("uri",location.pathname),clearInterval(timeoutTimer),location.reload())}$("#modal-signin").on("click",(()=>{clearInterval(timeoutTimer),localStorage.setItem("tabs","0"),location.reload()})),$("#modal-signout").on("click",(()=>{clearInterval(timeoutTimer),location.href="/signout"}));var showHideContent=new GOVUK.ShowHideContent;showHideContent.init(),GOVUK.details.init();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
