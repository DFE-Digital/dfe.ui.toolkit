name: Release-$(rev:r)

trigger:
  branches:
    include:
    - release/*
    - feature/*

parameters:
- name: tran 
  type: boolean
  displayName: 'Transformation Deployment'
  default: false
- name: dev
  type: boolean
  displayName: 'Dev Deployment'
  default: false
- name: test
  type: boolean
  displayName: 'Test Deployment'
  default: false
- name: int
  type: boolean
  displayName: 'INT Deployment'
  default: false
- name: pp
  type: boolean
  displayName: 'Pre-Prod Deployment'
  default: false
- name: pr
  type: boolean
  displayName: 'Prod Deployment'
  default: false

variables:
- group: dsi-global
- name: updatedStorageAccountName
  value: ''
- name: publicIp
  value: ''
- name: agentIp
  value: ''
- name: newCdnAssetsVersion
  value: ''
- name: tran
  ${{ if eq(parameters.tran, 'true') }}: 
    value: true
  ${{ else }}:
    value: false
- name: dev
  ${{ if eq(parameters.dev, 'true') }}:
    value: true
  ${{ else }}:
    value: false
- name: test
  ${{ if or(eq(parameters.test, 'true'), contains(variables['Build.SourceBranch'],'develop')) }}:
    value: true
  ${{ else }}:
    value: false
- name: int
  ${{ if or(eq(parameters.int, 'true'), contains(variables['Build.SourceBranch'],'release')) }}:
    value: true
  ${{ else }}:
    value: false
- name: pp
  ${{ if or(eq(parameters.pp, 'true'), contains(variables['Build.SourceBranch'],'release')) }}:
    value: true
  ${{ else }}:
    value: false
- name: pr
  ${{ if or(eq(parameters.pr, 'true'), contains(variables['Build.SourceBranch'],'release')) }}:
    value: true
  ${{ else }}:
    value: false

stages:
- ${{ each var in variables }}:
  - ${{ if in(var.key, 'tran','dev','test','int','pp','pr') }}:
    - ${{ if eq(var.value, 'true') }}:
      - stage: ${{var.Key}}cip
        variables:
        - name: serviceConnection
          ${{ if or(eq(var.key, 'dev'), eq(var.key, 'tran')) }}:
            value: $(devServiceConnection)
          ${{ elseif eq(var.key, 'pr') }}:
            value: $(prodServiceConnection)
          ${{ else }}:
            value: $(testServiceConnection)
        - group: dsi-${{var.key}}-kv
        - name: SubShortName
          value: $(platformGlobalIdentifier)$(environmentId)
        - name: storageAccountName
          value: $(SubShortName)signinshdstr
        - name: ShdResourceGroupName
          value: $(SubShortName)-shd
        - name: azureCdnName
          value: $(SubShortName)-signin-shd-cdn
        - name: cdnEndpointName
          value: $(subShortName)-signin-shd-cdnep
        displayName: ${{var.Key}}-cip
        jobs:
        - job: agentJob
          displayName: Agent Job
          steps:
      #      - task: PowerShell@2
      #        displayName: Fix Storage Account Name
      #        inputs:
      #          targetType: 'inline'
      #          script: |
      #            $updatedStorageAccountName = "$(storageAccountName)" - replace '-', ''
      #            ##vso[task.setvariable variable=storageAccountName;]$updatedStorageAccountName"
      #          condition: and(succeeded(), contains(variables['storageAccountName'], '-'))
            - powershell: |
                $updatedStorageAccountName = "$(storageAccountName)" -replace '-', ''
                "##vso[task.setvariable variable=storageAccountName;]$updatedStorageAccountName"
              displayName: 'Fix Storage Account Name'
              condition: and(succeeded(), contains(variables['storageAccountName'], '-'))

            - task: AzureCLI@2
              displayName: 'Empty Storage Container Contents'
              inputs:
                azureSubscription: "$(serviceConnection)"
                scriptType: pscore
                scriptLocation: inlineScript
                inlineScript: |
                  $publicIp = Invoke-RestMethod -uri https://api.ipify.org

                  az storage account network-rule add -g $(ShdResourceGroupName) --account-name $(storageAccountName) --ip-address $publicIp

                  Start-Sleep 180

                  az storage blob delete-batch --account-name $(storageAccountName) --source $(UIContainerName)

                  Write-Host "##vso[task.setvariable variable=agentIp]$publicIp"


            - task: AzureFileCopy@2
              displayName: Copy Content to Storage Account Container
              inputs:
                SourcePath: $(System.DefaultWorkingDirectory)/dist
                azureSubscription: '$(serviceConnection)'
                Destination: AzureBlob
                storage: '$(storageAccountName)'
                ContainerName: '$(UIContainerName)'

            - task: AzurePowerShell@5
              displayName: 'Set Container Public Access Level to Blob (Public)'
              inputs:
                azureSubscription: '$(serviceConnection)'
                ScriptType: 'InlineScript'
                Inline: >
                  Get-AzureRmStorageAccount -ResourceGroupName $(ShdResourceGroupName)
                  -Name $(storageAccountName) | Set-AzureStorageComntainerAcl 
                  -Name $(UIContainerName) -Permission Blob
                azurePowerShellVersion: LatestVersion

            - task: AzurePowerShell@5
              displayName: 'Purge CDN Content'
              inputs:
                azureSubscription: '$(serviceConnection)'
                azurePowerShellVersion: LatestVersion
                ScriptType: 'InlineScript'
                Inline: >
                  Get -AzureRmCdnEndpoint -ResourceGroupName $(ShdResourceGroupName)
                  -ProfileName $(azureCdnName) -EndpointName $(cdnEndpointName) | Unpublish-AzureRmCdnEndpointContent -PurgeContent '/*'

            - task: AzureCLI@2
              displayName: Remove IP Address From Storage Account
              inputs:
                azureSubscription: '$(serviceConnection)'
                scriptType: pscore
                scriptLocation: inlineScript
                inlineScript: 'az storage account network-rule remove -g $(ShdResourceGroupName) --account-name $(storageAccountName) --ip-address $(agentIp)'


              
        #      - task: cboroson.cboroson-ReadSecrets.cboroson-ReadSecrets.cboroson-ReadSecrets@1
        #        displayName: 'Read Secrets: '
        #        inputs:
        #          ConnectedServiceName: $(serviceConnection)
        #          resourceGroupName: $(ShdResourceGroupName)
        #          KeyVaultName: $(keyVaultName)
        #          secretOption: single
        #          secretName: $(secretName)

            - task: PowerShell@2
              displayName: Inline Powershell
              inputs:
                targetType: 'inline'
                script: |
                  $cdnAssetsVersion = [decimal]$(cdnAssetsVersion)
                  $newCdnAssetsVersion = $cdnAssetsVersion+0.1
                  Write-Host "vso[task.setvariable variable=cdnAssetsVersion;]$newCdnAssetsVersion"

        #      - task: cboroson.cboroson.WriteSecrets.cboroson-WriteSecrets.cboroson-WriteSecrets@1
        #        displayName: 'WriteSecrets: cdnAssetsVersion'
        #        inputs:
        #          ConnectedServiceName: $(serviceConnection)
        #          resourceGroupName: $(resourceGroupName)
        #          KeyVaultName: $(keyVaultName)
        #          SecretName: cdnAssetsVersion
        #          SecretValue: $(newCdnAssetsVersion)

